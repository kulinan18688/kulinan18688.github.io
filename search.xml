<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>软件的 GP 公钥不匹配问题</title>
    <url>/2024/08/15/gpgErr/</url>
    <content><![CDATA[<p>在安装 MySQL 软件包时，系统找不到与该软件包匹配的 GPG 公钥，从而无法验证包的完整性,出现以下报错信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Failing package is: mysql-community-server-5.7.44-1.el7.x86_64</span><br><span class="line">GPG Keys are configured as: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="1-查看已安装的-GPG-公钥"><a href="#1-查看已安装的-GPG-公钥" class="headerlink" title="1, 查看已安装的 GPG 公钥"></a>1, 查看已安装的 GPG 公钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa gpg-pubkey</span><br></pre></td></tr></table></figure>
<h3 id="2-查看软件包的-GPG-公钥"><a href="#2-查看软件包的-GPG-公钥" class="headerlink" title="2, 查看软件包的 GPG 公钥"></a>2, 查看软件包的 GPG 公钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -q gpg-pubkey --qf <span class="string">&#x27;%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125; --&gt; %&#123;summary&#125;\n&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-导入软件包的-GPG-公钥"><a href="#3-导入软件包的-GPG-公钥" class="headerlink" title="3, 导入软件包的 GPG 公钥"></a>3, 导入软件包的 GPG 公钥</h3><p>在&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F; 查看是否有对应的 GPG 公钥文件，如果没有，可以从官方网站下载对应的 GPG 公钥文件，然后导入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure>
<h3 id="4-重新安装软件包"><a href="#4-重新安装软件包" class="headerlink" title="4, 重新安装软件包"></a>4, 重新安装软件包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum reinstall mysql-community-server</span><br></pre></td></tr></table></figure>
<h3 id="5-禁用-GPG-检查"><a href="#5-禁用-GPG-检查" class="headerlink" title="5,禁用 GPG 检查"></a>5,禁用 GPG 检查</h3><p>如果实在没办法导入 GPG 公钥，可以禁用 GPG 检查，但是不推荐。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mysql-community-server --nogpgcheck</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>-运维</category>
      </categories>
  </entry>
  <entry>
    <title>frida安装</title>
    <url>/2024/08/11/frida%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="安装frida客户端"><a href="#安装frida客户端" class="headerlink" title="安装frida客户端"></a>安装frida客户端</h2><p>客户端安装在上位机，就是负责给手机下发命令的电脑</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install frida-tools</span><br></pre></td></tr></table></figure>
<p>查看版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ frida --version</span><br></pre></td></tr></table></figure>
<p>我这边的版本是16.4.7,对应的frida-server版本也要选择是16.4.7</p>
<h2 id="安装frida-server"><a href="#安装frida-server" class="headerlink" title="安装frida-server"></a>安装frida-server</h2><p>服务端安装在手机上，就是负责接收上位机下发的命令的手机</p>
<span id="more"></span>
<p>下载地址：<a href="https://github.com/frida/frida/releases">https://github.com/frida/frida/releases</a><br>除了版本，还要注意手机的架构, 查看手机架构的方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> adb shell getprop ro.product.cpu.abi</span><br><span class="line"> 或者</span><br><span class="line">adb shell <span class="built_in">uname</span> -m</span><br></pre></td></tr></table></figure>
<p>我这边的手机是x86,所以我要下载x86版本的frida-server: frida-server-16.4.7-android-x86.xz</p>
<p>下载对应版本的frida-server，然后上传到手机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ adb push frida-server /data/local/tmp //这里要注意，为什么存放路径是/data/local/tmp，\n因为这个路径是手机的临时目录，</span><br><span class="line">不需要root权限，而且具有执行权限,一开始我放到/sdcard/目录下，一直报权限不足</span><br><span class="line"></span><br><span class="line">$ adb shell <span class="string">&quot;chmod 755 /data/local/tmp/frida-server&quot;</span></span><br><span class="line">$ adb shell <span class="string">&quot;/data/local/tmp/frida-server &amp;&quot;</span></span><br></pre></td></tr></table></figure>
<p>测试是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ frida-ps -U</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>逆向 - Frida</category>
      </categories>
  </entry>
  <entry>
    <title>mysqldump备份数据库</title>
    <url>/2024/08/15/mysqldump/</url>
    <content><![CDATA[<p>我们可以使用mysqldump命令备份MySQL数据库，mysqldump是MySQL数据库备份工具，可以将数据库备份为SQL文件，然后可以使用这个SQL文件恢复数据库。</p>
<span id="more"></span>
<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><h3 id="1-备份数据库"><a href="#1-备份数据库" class="headerlink" title="1, 备份数据库"></a>1, 备份数据库</h3><p>你要导出的数据库名为 source_db，并且你希望将导出的文件保存为 source_db.sql：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -u 用户名 -p 密码 source_db &gt; source_db.sql</span><br></pre></td></tr></table></figure>
<h3 id="2-备份所有数据库"><a href="#2-备份所有数据库" class="headerlink" title="2, 备份所有数据库"></a>2, 备份所有数据库</h3><p>如果你想备份所有数据库，可以使用–all-databases选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -u 用户名 -p --all-databases &gt; all_databases.sql</span><br></pre></td></tr></table></figure>
<h3 id="3-备份数据库结构"><a href="#3-备份数据库结构" class="headerlink" title="3, 备份数据库结构"></a>3, 备份数据库结构</h3><p>如果你只想备份数据库结构，可以使用–no-data选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -u 用户名 -p --no-data source_db &gt; source_db_structure.sql</span><br></pre></td></tr></table></figure>
<h3 id="4-备份数据库数据"><a href="#4-备份数据库数据" class="headerlink" title="4, 备份数据库数据"></a>4, 备份数据库数据</h3><p>如果你只想备份数据库数据，可以使用–no-create-info选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -u 用户名 -p --no-create-info source_db &gt; source_db_data.sql</span><br></pre></td></tr></table></figure>
<h3 id="5-备份数据库表"><a href="#5-备份数据库表" class="headerlink" title="5, 备份数据库表"></a>5, 备份数据库表</h3><p>如果你只想备份数据库中的某些表，可以使用–tables选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -u 用户名 -p source_db --tables table1 table2 &gt; source_db_tables.sql</span><br></pre></td></tr></table></figure>
<h2 id="导入恢复"><a href="#导入恢复" class="headerlink" title="导入恢复"></a>导入恢复</h2><h3 id="1-导入数据库"><a href="#1-导入数据库" class="headerlink" title="1, 导入数据库"></a>1, 导入数据库</h3><p>你可以使用以下命令将数据库导入到MySQL服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u 用户名 -p 密码 source_db &lt; source_db.sql</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>-运维</category>
      </categories>
  </entry>
  <entry>
    <title>centos 服务器安装</title>
    <url>/2024/08/14/hexoinstll/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>-运维</category>
      </categories>
  </entry>
  <entry>
    <title>centos 服务器安装</title>
    <url>/2024/08/14/serverInstall/</url>
    <content><![CDATA[<h2 id="1-安装nginx"><a href="#1-安装nginx" class="headerlink" title="1. 安装nginx"></a>1. 安装nginx</h2><p>   正常安装nginx，yum install nginx,报错<br>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">No package nginx available.</span><br><span class="line">Error: Nothing to <span class="keyword">do</span></span><br></pre></td></tr></table></figure></p>
<span id="more"></span>
<h3 id="解决方法1："><a href="#解决方法1：" class="headerlink" title="解决方法1："></a>解决方法1：</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install epel-release</span><br></pre></td></tr></table></figure>
<h3 id="解决方法2："><a href="#解决方法2：" class="headerlink" title="解决方法2："></a>解决方法2：</h3><pre><code>在nginx官方网站找到适合你系统的.rpm包，下载后执行以下命令安装：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> rpm -ivh nginx-1.12.2-1.el7.ngx.x86_64.rpm</span><br></pre></td></tr></table></figure>
</code></pre>
<h3 id="解决方法3："><a href="#解决方法3：" class="headerlink" title="解决方法3："></a>解决方法3：</h3><pre><code>更换yum源，安装nginx
</code></pre>
<h4 id="备份现有YUM源"><a href="#备份现有YUM源" class="headerlink" title="备份现有YUM源"></a>备份现有YUM源</h4><pre><code>在更改YUM源之前，建议先备份当前的YUM源配置，以便在需要时可以还原。
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -r /etc/yum.repos.d/ /etc/yum.repos.d.backup/</span><br></pre></td></tr></table></figure>
</code></pre>
<h4 id="更换为阿里云YUM源"><a href="#更换为阿里云YUM源" class="headerlink" title="更换为阿里云YUM源"></a>更换为阿里云YUM源</h4><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sed -e <span class="string">&#x27;s|^mirrorlist=|#mirrorlist=|g&#x27;</span> \</span><br><span class="line">     -e <span class="string">&#x27;s|^#baseurl=http://mirror.centos.org/centos|baseurl=https://mirrors.aliyun.com/centos|g&#x27;</span> \</span><br><span class="line">     -i.bak \</span><br><span class="line">     /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>
</code></pre>
<h4 id="清理YUM缓存并更新"><a href="#清理YUM缓存并更新" class="headerlink" title="清理YUM缓存并更新"></a>清理YUM缓存并更新</h4><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum clean all</span><br><span class="line"><span class="built_in">sudo</span> yum makecache</span><br></pre></td></tr></table></figure>
</code></pre>
<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install nginx</span><br></pre></td></tr></table></figure>
</code></pre>
<p>##2. 安装mysql5.7</p>
<h3 id="2-1-添加MySQL官方仓库"><a href="#2-1-添加MySQL官方仓库" class="headerlink" title="2.1 添加MySQL官方仓库"></a>2.1 添加MySQL官方仓库</h3><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"><span class="built_in">sudo</span> rpm -ivh mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure>
</code></pre>
<h3 id="2-2-安装MySQL"><a href="#2-2-安装MySQL" class="headerlink" title="2.2 安装MySQL"></a>2.2 安装MySQL</h3><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install mysql-community-server</span><br></pre></td></tr></table></figure>
</code></pre>
<h3 id="2-3-启动MySQL"><a href="#2-3-启动MySQL" class="headerlink" title="2.3 启动MySQL"></a>2.3 启动MySQL</h3><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start mysqld</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure>
</code></pre>
<h3 id="2-4-查看MySQL初始密码"><a href="#2-4-查看MySQL初始密码" class="headerlink" title="2.4 查看MySQL初始密码"></a>2.4 查看MySQL初始密码</h3><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br></pre></td></tr></table></figure>
</code></pre>
<h3 id="2-5-设置安全选项"><a href="#2-5-设置安全选项" class="headerlink" title="2.5 设置安全选项"></a>2.5 设置安全选项</h3><pre><code>使用mysql_secure_installation命令来配置安全设置（例如修改密码、删除匿名用户等）
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mysql_secure_installation</span><br></pre></td></tr></table></figure>
</code></pre>
]]></content>
      <categories>
        <category>-运维</category>
      </categories>
  </entry>
  <entry>
    <title>为域名申请SSL证书</title>
    <url>/2024/08/16/sslfordomain/</url>
    <content><![CDATA[<p><a href="https://zerossl.com/">https://zerossl.com/</a><br>这个服务商支持90天免费证书，可以申请一个证书，然后下载证书文件，然后在服务器上配置证书即可。<br>同时他支持Ip地址验证，可以通过验证ip地址来申请证书，这样就不需要域名了。<br>第一次申请应该需要注册一个账号，然后登录</p>
<span id="more"></span>
<h3 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h3><p>进入<a href="https://zerossl.com/">https://zerossl.com/</a> 后,登录,点击New Certificate<br><img src="/images/ssl1.png" alt="image"><br>输入域名，点击Next<br><img src="/images/ssl2.png" alt="image"><br>选择90-Day 点击Next<br><img src="/images/ssl3.png" alt="image"><br>点击Next<br><img src="/images/ssl4.png" alt="image"><br>关闭pay monthy ,点击Next<br><img src="/images/ssl5.png" alt="image"><br>选择Http File,点击Next<br><img src="/images/ssl7.png" alt="image"></p>
<h3 id="验证域名"><a href="#验证域名" class="headerlink" title="验证域名"></a>验证域名</h3><p>这一步是为了验证域名是归你管理的。根据提示，将文件下载下来，然后上传到服务器上,并且设置Ngixn的配置文件,使其外部可以访问到这个文件<br>上传文件到服务器上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp ~/Downloads/D1921001A5646DDD0E6CAE7FFDB5980D.txt root@156.xx.xx.xx:/var/www/html/.well-known/pki-validation</span><br></pre></td></tr></table></figure>
<p>修改Nginx配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim valid.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 156.xx.xx.xx;</span><br><span class="line"></span><br><span class="line">    location /.well-known/pki-validation/ &#123;</span><br><span class="line">        <span class="built_in">alias</span> /var/www/html/.well-known/pki-validation/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="comment"># 其他配置...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">重启nginx ，nginx -s reload</span><br></pre></td></tr></table></figure>
<p>然后回到zerossl 点击Next,进行验证<br>验证通过后，根据提示下载证书文件,文件包括证书文件，私钥文件，中间证书文件,将这些文件上传到服务器上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ca_bundle.crt</span><br><span class="line">private.key</span><br><span class="line">certificate.crt</span><br><span class="line">scp ~/Downloads/156.xxx.xxx.xxx.zip root@156.xxx.xx.xxx:/etc/nginx/ssl/ipssl</span><br></pre></td></tr></table></figure>
<h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       6532 ssl;</span><br><span class="line">    server_name  156.xx.xx.xx;</span><br><span class="line">    ssl_certificate      /etc/nginx/ssl/ipssl/certificate.crt;</span><br><span class="line">    ssl_certificate_key  /etc/nginx/ssl/ipssl/private.key;</span><br><span class="line"></span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_ciphers <span class="string">&quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384&quot;</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/abc11_proxy.access.log  main;</span><br><span class="line">    error_log   /var/log/nginx/abc11_proxy.error.log  error;</span><br><span class="line"></span><br><span class="line">    client_max_body_size 10m;</span><br><span class="line">    client_body_buffer_size 512k;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1024;</span><br><span class="line">    gzip_buffers 16 8k;</span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml image/jpeg image/gif image/png;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_set_header Authorization <span class="variable">$http_authorization</span>;</span><br><span class="line">        proxy_pass http://xx.xxxx.xx:6433;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>-运维</category>
      </categories>
  </entry>
  <entry>
    <title>启用ssh 证书登录</title>
    <url>/2024/08/15/sshLogin/</url>
    <content><![CDATA[<p>默认情况下，ssh 登录需要输入密码，为了提高安全性，可以使用证书登录</p>
<span id="more"></span>
<h2 id="1-生成密钥对"><a href="#1-生成密钥对" class="headerlink" title="1, 生成密钥对"></a>1, 生成密钥对</h2><p>在本地机器上生成密钥对，公钥和私钥，公钥用于上传到服务器，私钥用于本地登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p>这个命令会生成一个公钥（<del>&#x2F;.ssh&#x2F;id_rsa.pub）和一个私钥（</del>&#x2F;.ssh&#x2F;id_rsa）</p>
<h2 id="2-上传公钥到服务器"><a href="#2-上传公钥到服务器" class="headerlink" title="2, 上传公钥到服务器"></a>2, 上传公钥到服务器</h2><p>将公钥上传到服务器，可以使用scp命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub root@xxxxx:/root</span><br></pre></td></tr></table></figure>
<h2 id="3-将公钥添加到服务器的authorized-keys文件"><a href="#3-将公钥添加到服务器的authorized-keys文件" class="headerlink" title="3, 将公钥添加到服务器的authorized_keys文件"></a>3, 将公钥添加到服务器的authorized_keys文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<h2 id="4-修改sshd-config文件"><a href="#4-修改sshd-config文件" class="headerlink" title="4, 修改sshd_config文件"></a>4, 修改sshd_config文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">PubkeyAuthentication <span class="built_in">yes</span></span><br><span class="line">PasswordAuthentication no</span><br><span class="line">ChallengeResponseAuthentication no</span><br><span class="line">UsePAM no</span><br></pre></td></tr></table></figure>

<h2 id="5-重启sshd服务"><a href="#5-重启sshd服务" class="headerlink" title="5, 重启sshd服务"></a>5, 重启sshd服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>-运维</category>
      </categories>
  </entry>
  <entry>
    <title>yum 锁定问题</title>
    <url>/2024/08/15/yumErr/</url>
    <content><![CDATA[<p>当正在使用yum安装软件时，突然中断，再次使用yum安装软件时，会出现yum锁定问题，解决方法如下：</p>
<span id="more"></span>
<h3 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Another app is currently holding the yum lock; waiting <span class="keyword">for</span> it to <span class="built_in">exit</span>...</span><br><span class="line">  The other application is: yum</span><br><span class="line">    Memory :  74 M RSS (398 MB VSZ)</span><br><span class="line">    Started: Thu Aug 15 08:54:53 2024 - 1:28:07 ago</span><br><span class="line">    State  : Sleeping, pid: 22963</span><br></pre></td></tr></table></figure>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="1-查看yum进程"><a href="#1-查看yum进程" class="headerlink" title="1, 查看yum进程"></a>1, 查看yum进程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep yum</span><br></pre></td></tr></table></figure>
<h4 id="2-杀掉yum进程"><a href="#2-杀掉yum进程" class="headerlink" title="2, 杀掉yum进程"></a>2, 杀掉yum进程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 22963</span><br></pre></td></tr></table></figure>
<h4 id="3-删除yum锁文件"><a href="#3-删除yum锁文件" class="headerlink" title="3, 删除yum锁文件"></a>3, 删除yum锁文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f /var/run/yum.pid</span><br></pre></td></tr></table></figure>
<h4 id="4-清理yum缓存"><a href="#4-清理yum缓存" class="headerlink" title="4, 清理yum缓存"></a>4, 清理yum缓存</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure>
<h4 id="5-更新yum缓存"><a href="#5-更新yum缓存" class="headerlink" title="5, 更新yum缓存"></a>5, 更新yum缓存</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>-运维</category>
      </categories>
  </entry>
  <entry>
    <title>arm汇编学习笔记0-环境搭建</title>
    <url>/2024/09/06/arm_example0/</url>
    <content><![CDATA[<p>最新在学习arm汇编，经过全网搜索，决定以ARM Assembly By Example 这本书为主线进行学习，这里记录一下学习笔记。</p>
<span id="more"></span>
<h2 id="安装arm汇编编环境"><a href="#安装arm汇编编环境" class="headerlink" title="安装arm汇编编环境"></a>安装arm汇编编环境</h2><p>arm架构有32位和64位之分。下面分别介绍如何安装32位和64位的arm汇编编译器。由于我习惯用mac，所以这里只介绍mac下的安装方法。</p>
<h3 id="32位-arm汇编编译器安装"><a href="#32位-arm汇编编译器安装" class="headerlink" title="32位 arm汇编编译器安装"></a>32位 arm汇编编译器安装</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在arm的官网https://developer.arm.com/downloads/-/gnu-rm 下载对应的版本，这里我下载的是10.3-2021.10版本</span><br><span class="line">https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-mac.tar.bz2?rev=58ed196feb7b4ada8288ea521fa87ad5&amp;<span class="built_in">hash</span>=F095D2C3D1659B531BE482826BE4A6E1</span><br></pre></td></tr></table></figure>
<p>下载完成后，解压到指定目录<br>tar -xvf gcc-arm-none-eabi-10.3-2021.10-mac.tar.bz2 -C &#x2F;usr&#x2F;local<br>把解压后的目录加入到环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line">在文件末尾加入</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/gcc-arm-none-eabi-10.3-2021.10/bin</span><br></pre></td></tr></table></figure>
<p>这样就可以在终端使用arm-none-eabi-as和arm-none-eabi-ld命令了</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>目录里：<br>&#x2F;bin&#x2F;arm-none-eabi-as &#x2F;&#x2F;汇编器<br>&#x2F;bin&#x2F;arm-none-eabi-ld &#x2F;&#x2F;链接器<br>就是我们需要的工具,可以通过下面的命令编译汇编文件，链接文件得到可以执行的文件hello<br>下面是一个简单的基于32位arm的汇编文件,暂不理会其内容，只是用来测试编译器是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.global _start</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">_start:</span><br><span class="line">    MOV R0, <span class="comment">#1         // 将R0寄存器设置为1 (stdout)</span></span><br><span class="line">    LDR R1, =message   // 将消息的地址加载到R1</span><br><span class="line">    MOV R2, <span class="comment">#13        // 设置消息的长度 (13字节)</span></span><br><span class="line">    MOV R7, <span class="comment">#4         // 系统调用号 (sys_write)</span></span><br><span class="line">    SWI 0              // 触发系统调用</span><br><span class="line"></span><br><span class="line">    MOV R7, <span class="comment">#1         // 系统调用号 (sys_exit)</span></span><br><span class="line">    SWI 0              // 触发系统调用</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">message:</span><br><span class="line">    .ascii <span class="string">&quot;Hello, ARM!\n&quot;</span></span><br></pre></td></tr></table></figure>
<p>arm-none-eabi-as -o hello.o hello.s &#x2F;&#x2F;编译汇编文件<br>arm-none-eabi-ld -o hello hello.o &#x2F;&#x2F;链接文件</p>
<h3 id="64位-arm汇编编译器安装"><a href="#64位-arm汇编编译器安装" class="headerlink" title="64位 arm汇编编译器安装"></a>64位 arm汇编编译器安装</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install aarch64-linux-gnu-gcc</span><br></pre></td></tr></table></figure>
<p> aarch64-elf-as &#x2F;&#x2F;汇编器<br> aarch64-elf-ld &#x2F;&#x2F;链接器</p>
<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p> 以下是一个简单的基于64位arm的汇编文件,暂不理会其内容，只是用来测试编译器是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.global _start</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">_start:</span><br><span class="line">    MOV X0, <span class="comment">#1         // 将X0寄存器设置为1 (stdout)</span></span><br><span class="line">    LDR X1, =message   // 将消息的地址加载到X1</span><br><span class="line">    MOV X2, <span class="comment">#13        // 设置消息的长度 (13字节)</span></span><br><span class="line">    MOV X8, <span class="comment">#64        // 系统调用号 (sys_write)</span></span><br><span class="line">    SVC 0              // 触发系统调用</span><br><span class="line"></span><br><span class="line">    MOV X8, <span class="comment">#93        // 系统调用号 (sys_exit)</span></span><br><span class="line">    SVC 0              // 触发系统调用</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">message:</span><br><span class="line">    .ascii <span class="string">&quot;Hello, ARM!\n&quot;</span></span><br></pre></td></tr></table></figure>
<p>执行以下命令,得到可以在arm64架构上运行的hello文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aarch64-elf-as -o hello.o hello.s //编译汇编文件</span><br><span class="line">aarch64-elf-ld -o hello hello.o //链接文件</span><br></pre></td></tr></table></figure>
<h2 id="在mac中使用qemu模拟运行arm程序"><a href="#在mac中使用qemu模拟运行arm程序" class="headerlink" title="在mac中使用qemu模拟运行arm程序"></a>在mac中使用qemu模拟运行arm程序</h2><p>上面我们已知道了如何编译arm汇编文件，但是我们的mac是x86架构的，无法直接运行arm程序，这里我们使用qemu模拟器来运行arm程序<br>我将使用docker来安装qemu，这样可以避免一些不必要的麻烦</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull multiarch/qemu-user-static //首先，拉取包含 QEMU 用户模式仿真工具的 multiarch/qemu-user-static 镜像</span><br><span class="line">docker run --<span class="built_in">rm</span> --privileged multiarch/qemu-user-static --reset -p <span class="built_in">yes</span> //然后，运行容器以启用 QEMU 用户模式仿真,--privileged 选项是为了允许 QEMU 在主机系统上设置仿真。</span><br><span class="line">docker pull arm64v8/ubuntu //拉取你需要运行的架构的基础镜像。例如，如果你想运行 ARM64 程序，可以拉取 ARM64 的 Ubuntu 镜像</span><br><span class="line">docker run --<span class="built_in">rm</span> -t arm64v8/ubuntu <span class="built_in">uname</span> -m //这个命令会输出当前系统的架构。你应该看到输出为 aarch64，表示 QEMU 正在仿真 ARM64 架构。</span><br><span class="line">docker run --<span class="built_in">rm</span> -it -v $(<span class="built_in">pwd</span>)/hello1:/hello1 arm64v8/ubuntu /bin/bash //运行一个新容器，将你的程序挂载到容器中</span><br></pre></td></tr></table></figure>
<p>执行完上面的命令后，你会进入到一个ubuntu的容器中，这时候你可以执行下面的命令来运行你的arm程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./hello</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
  </entry>
  <entry>
    <title>记一次安卓root</title>
    <url>/2024/08/11/anroidroot/</url>
    <content><![CDATA[<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p> 我的手机是pixel3，所以我下载了对应的镜像，下载地址：<a href="https://developers.google.com/android/images?hl=zh-cn#blueline">https://developers.google.com/android/images?hl=zh-cn#blueline</a></p>
]]></content>
      <categories>
        <category>逆向</category>
      </categories>
  </entry>
  <entry>
    <title>记一次安卓编译过程</title>
    <url>/2024/08/19/oldandroidapp/</url>
    <content><![CDATA[<p>因为接手一个老项目，需要对安卓项目进行编译，但是项目中的很多依赖已经过时，官方库已经删除,当中遇到很多问题。这里记录一下编译过程。</p>
<span id="more"></span>
<h2 id="Java版本问题"><a href="#Java版本问题" class="headerlink" title="Java版本问题"></a>Java版本问题</h2><h3 id="gradlew-build-出现以下错误"><a href="#gradlew-build-出现以下错误" class="headerlink" title="gradlew build  出现以下错误"></a>gradlew build  出现以下错误</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Could not initialize class org.codehaus.groovy.classgen.Verifier</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: Could not initialize class org.codehaus.groovy.vmplugin.v7.Java7</span><br></pre></td></tr></table></figure>

<p>这通常与 Gradle 使用的 JDK 版本和Gradle不兼容有关。Gradle 5.0 以上版本需要 JDK 8 或更高版本。可以通过修改 gradle-wrapper.properties 文件中的 distributionUrl 来指定 JDK 版本。</p>
<p>java -version</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">查找java8huo java11的路径</span><br></pre></td></tr></table></figure>
<p>修改gradle.properties文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">org.gradle.java.home=/path/to/java8_or_java11</span><br></pre></td></tr></table></figure>
<h3 id="在android-studio中出现-Unsupported-Java"><a href="#在android-studio中出现-Unsupported-Java" class="headerlink" title="在android studio中出现 Unsupported Java."></a>在android studio中出现 Unsupported Java.</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Unsupported Java. </span><br><span class="line">Your build is currently configured to use Java 17.0.6 and Gradle 5.6.4.</span><br></pre></td></tr></table></figure>
<p>解决方法，需要在andori studio中修改jdk版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">可以手动打开 JDK 设置：</span><br><span class="line">转到 File &gt; Settings（在 macOS 上为 Android Studio &gt; Preferences）。</span><br><span class="line">在左侧导航栏中找到 Build, Execution, Deployment &gt; Build Tools &gt; Gradle。</span><br><span class="line">在 Gradle 设置页面上，你可以选择项目使用的 JDK 版本。</span><br><span class="line">检查和修改 JDK 路径：</span><br><span class="line">在 Gradle JDK 下拉菜单中选择兼容的 JDK 版本（推荐使用 Java 8 或 Java 11，如果你使用 Gradle 5.6.4）。</span><br><span class="line">设置完成后，点击 Apply，然后点击 OK。</span><br></pre></td></tr></table></figure>
<p><img src="/images/gradelsdk.png" alt="image"></p>
<h2 id="修改gradle版本"><a href="#修改gradle版本" class="headerlink" title="修改gradle版本"></a>修改gradle版本</h2><p>对于老项目，gradle版本可能比较老，需要修改gradle版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在gradle-wrapper.properties文件中修改gradle版本</span><br><span class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-5.6.4-all.zip //修改为5.6.4</span><br></pre></td></tr></table></figure>

<h2 id="旧版本依赖问题"><a href="#旧版本依赖问题" class="headerlink" title="旧版本依赖问题"></a>旧版本依赖问题</h2><p>这次编译遇到的anko库,在官方库中已经删除,处理了很久，这里记录一下解决方法。</p>
<h3 id="手动下载jar包或者aar包-本地引用"><a href="#手动下载jar包或者aar包-本地引用" class="headerlink" title="手动下载jar包或者aar包,本地引用"></a>手动下载jar包或者aar包,本地引用</h3><h4 id="flatDir-方式"><a href="#flatDir-方式" class="headerlink" title="flatDir 方式"></a>flatDir 方式</h4><p>1,将编译好的 .jar 或 .aar 文件放到你项目的 libs 文件夹中<br>2,在你的 build.gradle 文件中添加如下代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        flatDir &#123;</span><br><span class="line">            dirs &#x27;libs&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3, 在app的build.gradle中添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation(name: &#x27;anko-sdk15-0.10.8&#x27;, ext: &#x27;aar&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">或者</span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation files(&#x27;libs/anko-sdk15-0.10.8.aar&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用-mavenLocal-和-mvn-install-方法"><a href="#使用-mavenLocal-和-mvn-install-方法" class="headerlink" title="使用 mavenLocal 和 mvn install 方法"></a>使用 mavenLocal 和 mvn install 方法</h4><p>1, 安装 AAR 到本地 Maven 仓库：<br>在 mvn install:install-file 命令中，参数-Dfile 是指 AAR 文件的路径，可以是相对路径或者绝对路径。-DgroupId 和 -DartifactId 是 Maven 中用来唯一标识项目的坐标，你可以根据项目的情况来设置这些值。</p>
<p>参数解释：<br>-Dfile：指向你要安装的 AAR 文件的路径，可以是绝对路径或相对路径。<br>绝对路径：如 &#x2F;Users&#x2F;username&#x2F;project&#x2F;libs&#x2F;your-library.aar<br>相对路径：如 libs&#x2F;your-library.aar<br>-DgroupId：是库的分组ID，用于组织库，可以根据你的项目来命名。例如，如果你正在处理一个自定义库，可以使用类似 com.example.mylibrary 这样的命名。通常，这与组织或公司名相关。</p>
<p>-DartifactId：是库的工件ID，一般是库的名称。例如，如果你正在处理一个名为 anko-commons 的库，那么 artifactId 可以是 anko-commons。</p>
<p>-Dversion：库的版本号，可以设置为你需要的任何版本。例如，0.10.8。</p>
<p>-Dpackaging&#x3D;aar：指明文件类型为 aar。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=anko-sdk15-0.10.8.aar -DgroupId=org.jetbrains.anko -DartifactId=anko-sdk15 -Dversion=0.10.8 -Dpackaging=aar</span><br></pre></td></tr></table></figure>
<p>2,引入本地maven库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3,在app的build.gradle中添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation &#x27;org.jetbrains.anko:anko-sdk15:0.10.8&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="最终解决办法"><a href="#最终解决办法" class="headerlink" title="最终解决办法"></a>最终解决办法</h4><p>终于找到了阿里的maven库，可以直接引用; 阿里这回值得表扬一下，提供了很多老的依赖库，可以直接引用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url &#x27;https://maven.aliyun.com/repository/public&#x27; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation &#x27;org.jetbrains.anko:anko-sdk15:0.10.8&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Kotlin-版本冲突"><a href="#Kotlin-版本冲突" class="headerlink" title="Kotlin 版本冲突"></a>Kotlin 版本冲突</h2><p>在编译过程中，遇到了kotlin版本冲突问题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> Task :app:compileDebugKotlin FAILED</span><br><span class="line">w: Runtime JAR files in the classpath should have the same version. These files were found in the classpath:</span><br><span class="line">w: Consider providing an explicit dependency on kotlin-reflect 1.3 to prevent strange errors</span><br><span class="line">w: Some runtime JAR files in the classpath have an incompatible version. Consider removing them from the classpath</span><br></pre></td></tr></table></figure>
<p>解决方法，在项目的 build.gradle 中统一 Kotlin 版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ext.kotlin_version = &#x27;1.3.72&#x27;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解决jre7问题"><a href="#解决jre7问题" class="headerlink" title="解决jre7问题"></a>解决jre7问题</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">Could not determine the dependencies of task &#x27;:app:lintVitalRelease&#x27;.</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Could not resolve all artifacts <span class="keyword">for</span> configuration <span class="string">&#x27;:app:debugCompileClasspath&#x27;</span>.</span></span><br><span class="line"><span class="meta prompt_">   &gt; </span><span class="language-bash">Could not find org.jetbrains.kotlin:kotlin-stdlib-jre7:1.3.50.</span></span><br><span class="line">     Required by:</span><br><span class="line">         project :app &gt; com.twisty:interlude:1.0.2</span><br></pre></td></tr></table></figure>
<p>出现以上的错误 ，是因为项目中引用了 kotlin-stdlib-jre7，但是在maven中找不到这个库，需要修改为 kotlin-stdlib-jdk7<br>解决方法，在项目的 build.gradle 中添加以下代码,这段代码会将所有对 kotlin-stdlib-jre7 的请求重定向到 kotlin-stdlib-jdk7。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">configurations.all &#123;</span><br><span class="line">    resolutionStrategy.eachDependency &#123; details -&gt;</span><br><span class="line">        if (details.requested.name == &quot;kotlin-stdlib-jre7&quot;) &#123;</span><br><span class="line">            details.useTarget(&quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$&#123;details.requested.version&#125;&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>-android</category>
      </categories>
  </entry>
  <entry>
    <title>arm汇编学习笔记1-寄存器和指令</title>
    <url>/2024/09/09/arm_example1/</url>
    <content><![CDATA[<p>本系列文章以64位arm架构(aarch64)为主线,会穿插些32位arm架构的内容和对比。</p>
<span id="more"></span>
<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>对于现代的64位ARM架构，通常寄存器的命名为 x0 到 x31。64位处理器有更多的通用寄存器，<br>因此扩展到了 31 个通用寄存器，加上一个特殊的寄存器（x30），通常用于存储返回地址。<br>如果你使用的是 AArch64 架构（64位的ARM架构），则寄存器会分为以下两种命名方式：<br>x0 到 x31：用于64位操作，表示64位宽的寄存器。<br>w0 到 w31：用于32位操作，表示寄存器的低32位。<br>在64位ARM架构中，寄存器的命名方式为 x0 到 x31，而在32位ARM架构中，寄存器的命名方式为 r0 到 r15。</p>
<h2 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h2><p>基本上有三种类型的助记符或操作码。（Rd &#x3D; 目标寄存器，Rn &#x3D; 源寄存器，op2 可以是寄存器或立即数）</p>
<p>一些操作码不生成结果： opcode Rn, op2<br>一些操作码仅处理单个寄存器： opcode Rd, op2<br>一些操作码根据源数据生成结果： opcode Rd, Rn, op2</p>
<h3 id="不生成结果的操作码"><a href="#不生成结果的操作码" class="headerlink" title="不生成结果的操作码"></a>不生成结果的操作码</h3><p> 这些操作码通常是执行某种操作，但没有输出结果。例如，我们可以使用 比较指令 (cmp)，它只是比较两个寄存器或一个寄存器与立即数的值，但不会产生结果存储在某个寄存器中。</p>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmp</span> <span class="built_in">x0</span>, <span class="built_in">x1</span>  <span class="comment">// 比较 x0 和 x1 的值，不生成结果，只设置标志位</span></span><br></pre></td></tr></table></figure>
<h3 id="仅处理单个寄存器的操作码"><a href="#仅处理单个寄存器的操作码" class="headerlink" title="仅处理单个寄存器的操作码"></a>仅处理单个寄存器的操作码</h3><p>这些操作码对一个寄存器或立即数执行操作，但只涉及一个目标寄存器。常见的操作是将一个值加载到寄存器中。</p>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">x0</span>, <span class="number">#5</span>  <span class="comment">// 将立即数 5 移动到寄存器 x0</span></span><br></pre></td></tr></table></figure>
<h3 id="根据源数据生成结果的操作码"><a href="#根据源数据生成结果的操作码" class="headerlink" title="根据源数据生成结果的操作码"></a>根据源数据生成结果的操作码</h3><p>这些操作码通常涉及两个寄存器和一个目标寄存器。例如，我们可以使用 加法指令 (add)，它将两个寄存器的值相加，并将结果存储在目标寄存器中。</p>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add</span> <span class="built_in">x0</span>, <span class="built_in">x1</span>, <span class="built_in">x2</span>  <span class="comment">// 将 x1 和 x2 的值相加，并将结果存储在 x0 中</span></span><br></pre></td></tr></table></figure>
<h2 id="立即数"><a href="#立即数" class="headerlink" title="立即数"></a>立即数</h2><p>立即数以 # 号开头，后接单引号中的字符或二进制、八进制、十进制或十六进制数字<br>在32位ARM架构中，立即数的范围是 0 到 255，而在64位ARM架构中，立即数的范围是 0 到 4095。<br>可以使用0到255(32位处理器)之间的整数<br>可以使用0到4095(64位处理器)之间的整数<br>单引号中的ASCII字符</p>
<p>在64位ARM架构中,关于立即数,限制不同于传统的 ARM 32 位架构。具体来说，在 AArch64 中，立即数的范围和格式取决于指令类型。</p>
<h3 id="1-算术和逻辑指令（加法、减法、按位与等）"><a href="#1-算术和逻辑指令（加法、减法、按位与等）" class="headerlink" title="1. 算术和逻辑指令（加法、减法、按位与等）"></a>1. 算术和逻辑指令（加法、减法、按位与等）</h3><p>对于加法 (add)、减法 (sub) 和按位与 (and) 等算术和逻辑操作的指令，立即数有特定的编码规则。它们的立即数并不是简单的 0 到 255，而是通过一个 可旋转的 12 位 数字来表示。因此，在 AArch64 中，立即数并不仅限于 0 到 255，而是可以表示更大、更复杂的数值。</p>
<p>例如，add 或 sub 指令的立即数范围可以表示成 12 位的无符号数（0 到 4095），并且可以在某些指令中通过移位操作扩展。</p>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add</span> <span class="built_in">x0</span>, <span class="built_in">x1</span>, <span class="number">#4095</span>  <span class="comment">// 将 x1 的值加上立即数 4095，结果存储在 x0 中</span></span><br></pre></td></tr></table></figure>
<h3 id="2-逻辑移位指令（左移、右移、循环移位等）"><a href="#2-逻辑移位指令（左移、右移、循环移位等）" class="headerlink" title="2. 逻辑移位指令（左移、右移、循环移位等）"></a>2. 逻辑移位指令（左移、右移、循环移位等）</h3><p>对于某些按位逻辑操作（例如 orr 或 eor），AArch64 允许立即数的表示更为复杂。立即数可以是一个 32 位或 64 位的模式，由少量的可变参数决定。这种设计使得可以表示非常灵活的立即数。</p>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">orr</span> <span class="built_in">x0</span>, <span class="built_in">x1</span>, <span class="number">#0xFF</span>  <span class="comment">// 将 x1 按位或上 0xFF，结果存储在 x0 中</span></span><br></pre></td></tr></table></figure>

<h3 id="3-加载指令（如-ldr）"><a href="#3-加载指令（如-ldr）" class="headerlink" title="3. 加载指令（如 ldr）"></a>3. 加载指令（如 ldr）</h3><p>在加载指令中，立即数可以用来表示内存地址的偏移量，并且这个偏移量也有特定的编码范围，通常远超过 255。例如：</p>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ldr</span> <span class="built_in">x0</span>, [<span class="built_in">x1</span>, <span class="number">#0x100</span>]  <span class="comment">// 从地址 x1 + 0x100 处加载数据到 x0 中</span></span><br></pre></td></tr></table></figure>
<h3 id="4-MOV-指令的立即数"><a href="#4-MOV-指令的立即数" class="headerlink" title="4, MOV 指令的立即数"></a>4, MOV 指令的立即数</h3><p>mov 指令在 AArch64 中有时也能处理更大的立即数。例如，它可以加载 16 位的立即数到寄存器中，然后通过逻辑移位来扩展到 64 位。这使得 mov 能够加载的数值范围比 32 位 ARM 要大得多。</p>
<p>示例：</p>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">x0</span>, <span class="number">#0x1234</span>  <span class="comment">// 将立即数 0x1234 移动到 x0 中</span></span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在 AArch64 中，立即数的范围和表示比 ARM 32 位架构更复杂，并不局限于 0 到 255。不同指令有不同的立即数编码规则和限制：</p>
<p>对于大多数算术指令，立即数的范围可以达到 0 到 4095。<br>对于逻辑操作，立即数可以表示较为复杂的模式。<br>mov 指令能够处理更大的数值，具体取决于指令的移位和操作方式。<br>因此，AArch64 中的立即数灵活性更高，远远超出了 0 到 255 的范围。</p>
<h2 id="补充知识-32位处理器和64位处理器的定义和区别"><a href="#补充知识-32位处理器和64位处理器的定义和区别" class="headerlink" title="补充知识: 32位处理器和64位处理器的定义和区别"></a>补充知识: 32位处理器和64位处理器的定义和区别</h2><p>通常所说的32位处理器和64位处理器，主要是根据处理器的寄存器宽度来定义的，<br>也就是处理器一次能够处理的数据的宽度（以位为单位）。<br>具体来说，32位或64位指的是处理器中通用寄存器的宽度，也就是一次能够操作的数据位数。</p>
<h3 id="1-寄存器宽度"><a href="#1-寄存器宽度" class="headerlink" title="1. 寄存器宽度"></a>1. 寄存器宽度</h3><p>32位处理器的通用寄存器宽度为32位，这意味着它一次能够处理32位的数据；而64位处理器的通用寄存器宽度为64位，能够一次处理64位的数据。</p>
<p>示例：<br>32位处理器：寄存器为32位宽，即每次操作32位（4字节）数据。<br>64位处理器：寄存器为64位宽，即每次操作64位（8字节）数据。</p>
<h3 id="2-内存寻址能力"><a href="#2-内存寻址能力" class="headerlink" title="2. 内存寻址能力"></a>2. 内存寻址能力</h3><p>32位处理器 最多可以寻址 2^32 &#x3D; 4GB 的内存。<br>64位处理器 最多可以寻址 2^64 &#x3D; 16EB（Exabytes）的内存，但实际系统和操作系统的限制通常远小于这个数值。</p>
<h3 id="3-指令集架构"><a href="#3-指令集架构" class="headerlink" title="3, 指令集架构"></a>3, 指令集架构</h3><p>32位和64位处理器在其<strong>指令集架构（ISA）</strong>方面也有所不同。64位处理器能够执行64位指令，处理更多的寄存器和更大的数据；<br>32位处理器只能处理32位的指令，限制了其并行处理能力和内存访问能力。</p>
<h3 id="关于指令中l的立即数空间疑惑"><a href="#关于指令中l的立即数空间疑惑" class="headerlink" title="关于指令中l的立即数空间疑惑"></a>关于指令中l的立即数空间疑惑</h3><p>上面提到了立即数的范围，但是在32位处理器中，立即数的范围是0到255，而在64位处理器中，立即数的范围是0到4095。<br>他们的范围是根据什么来定义的呢？是根据处理器的位数来定义的吗？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">答案:</span><br><span class="line">1. 32 位处理器立即数的来源</span><br><span class="line">在 32 位处理器（如 ARM 的 32 位架构）中，立即数的范围通常被限制在 0 到 255，这主要是由于以下原因：</span><br><span class="line"></span><br><span class="line">指令编码格式：ARM 32 位架构中的每条指令长度为 32 位，其中一部分位用于操作码（指令类型），一部分位用于寄存器编号，剩下的位用于表示立即数（也称为立即值，immediate value）。在这种情况下，立即数的位数被设计为 8 位，这就是为什么立即数被限制在 0 到 255（即 8 位无符号整数）。</span><br><span class="line">桶式移位器（barrel shifter）：为了提供更多的灵活性，ARM 架构允许立即数通过桶式移位器来进行移位，这样可以表示更多的数值。例如，立即数可以在 8 位基础上左移一定的位数，来扩大能够表示的数值范围。</span><br><span class="line">示例：</span><br><span class="line">ARM 32 位指令的立即数部分允许如下表示：</span><br><span class="line"></span><br><span class="line"><span class="comment">#255 是合法的立即数，因为它是 8 位以内的数。</span></span><br><span class="line"><span class="comment">#0xFF000000 是通过将 255 左移 24 位得到的数。</span></span><br><span class="line">总之，32 位处理器中立即数的 0 到 255 的范围来自于 8 位立即数限制，而不是直接由处理器的位宽决定的。</span><br><span class="line"></span><br><span class="line">2. 64 位处理器立即数的来源</span><br><span class="line">在 64 位处理器（如 ARM AArch64 架构）中，立即数的范围同样依赖于指令的设计，而不是简单地随着位宽增加而变大。64 位处理器的指令编码仍然是固定长度的（通常也是 32 位宽），因此立即数部分的位数依然受到限制。</span><br><span class="line"></span><br><span class="line">64 位处理器的不同立即数范围：</span><br><span class="line">算术和逻辑指令（如加法、减法、按位与等）：在 64 位架构的这些指令中，立即数部分通常是 12 位宽。因此，对于像 add、sub 等指令，立即数可以是 0 到 4095。</span><br><span class="line"></span><br><span class="line">逻辑移位和按位运算指令：有时，AArch64 的立即数还可以表示更复杂的值，例如使用旋转的立即数或特定模式。</span><br><span class="line"></span><br><span class="line">MOV 指令：可以将 16 位立即数加载到寄存器中，并通过移位将其扩展为 64 位，这样可以表示更大的数值。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">add x0, x1, <span class="comment">#4095 允许立即数为 0 到 4095。</span></span><br><span class="line">mov x0, <span class="comment">#0x1234 允许 16 位立即数。</span></span><br><span class="line">总之，在 64 位处理器中，立即数的范围通常取决于具体的指令设计，而并非处理器的 64 位宽度直接决定立即数的大小。</span><br><span class="line"></span><br><span class="line">3. 指令长度的影响</span><br><span class="line">无论是 32 位还是 64 位处理器，大多数指令集（如 ARM）中指令的长度是固定的（例如，ARM 通常每条指令是 32 位宽），因此立即数的长度受到指令总长度的限制。为了将操作码、寄存器和立即数等信息都编码在一条指令中，立即数的位数通常较少。</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line">在 32 位处理器 中，立即数范围通常为 0 到 255，这是因为指令格式中只有 8 位用于表示立即数（加上桶式移位器可以扩大表示范围）。</span><br><span class="line">在 64 位处理器 中，立即数的范围更大（通常 0 到 4095 或更多），但仍然受限于指令的设计，而不是处理器的 64 位宽度。</span><br><span class="line">立即数的空间由指令编码中的位数分配决定，而不是直接由处理器位宽决定。</span><br></pre></td></tr></table></figure>

<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>处理器位数（32位或64位） 是根据寄存器宽度来定义的，寄存器宽度决定了处理器一次能够处理的数据大小。<br>处理器的位数还影响到它的内存寻址能力，64位处理器可以寻址更大的内存空间。<br>数据总线宽度虽然相关，但并不是定义处理器位数的标准。<br>所以，通常我们所说的32位或64位处理器，主要是根据寄存器的位宽来定义的。</p>
<h2 id="补充知识-16进制，10进制，2进制之间的转换"><a href="#补充知识-16进制，10进制，2进制之间的转换" class="headerlink" title="补充知识,16进制，10进制，2进制之间的转换"></a>补充知识,16进制，10进制，2进制之间的转换</h2><h3 id="基础转换规则"><a href="#基础转换规则" class="headerlink" title="基础转换规则"></a>基础转换规则</h3><p>基本的十六进制与二进制的转换规则。十六进制的每一位可以用 4 位二进制来表示，十六进制的每一位和其对应的 4 位二进制之间有固定的对应关系</p>
<table>
<thead>
<tr>
<th>十六进制</th>
<th>二进制</th>
<th>十进制</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0000</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0001</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>0010</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>0011</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>0100</td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td>0101</td>
<td>5</td>
</tr>
<tr>
<td>6</td>
<td>0110</td>
<td>6</td>
</tr>
<tr>
<td>7</td>
<td>0111</td>
<td>7</td>
</tr>
<tr>
<td>8</td>
<td>1000</td>
<td>8</td>
</tr>
<tr>
<td>9</td>
<td>1001</td>
<td>9</td>
</tr>
<tr>
<td>A</td>
<td>1010</td>
<td>10</td>
</tr>
<tr>
<td>B</td>
<td>1011</td>
<td>11</td>
</tr>
<tr>
<td>C</td>
<td>1100</td>
<td>12</td>
</tr>
<tr>
<td>D</td>
<td>1101</td>
<td>13</td>
</tr>
<tr>
<td>E</td>
<td>1110</td>
<td>14</td>
</tr>
<tr>
<td>F</td>
<td>1111</td>
<td>15</td>
</tr>
</tbody></table>
<p>十六进制每一位等于4 位二进制。<br>二进制4位可以快速转换为0-15的十进制数。</p>
<h3 id="2-分段转换法"><a href="#2-分段转换法" class="headerlink" title="2. 分段转换法"></a>2. 分段转换法</h3><p>例子： 0xFFEA</p>
<h4 id="每一位转换为二进制："><a href="#每一位转换为二进制：" class="headerlink" title="每一位转换为二进制："></a>每一位转换为二进制：</h4><ul>
<li>F &#x3D; 1111（二进制）</li>
<li>F &#x3D; 1111（二进制）</li>
<li>E &#x3D; 1110（二进制）</li>
<li>A &#x3D; 1010（二进制）</li>
</ul>
<p>所以 0xFFEA &#x3D; 1111 1111 1110 1010（二进制）。</p>
<h4 id="二进制转十进制："><a href="#二进制转十进制：" class="headerlink" title="二进制转十进制："></a>二进制转十进制：</h4><p>直接将二进制按权相加：</p>
<p>1111 1111 1110 1010 &#x3D; (1 × 2^15) + (1 × 2^14) + ⋯ + (1 × 2^1) + (0 × 2^0)</p>
<p>为方便，你可以利用计算器或分步进行如下计算：</p>
<p>0xFFEA &#x3D; (15 × 16^3) + (15 × 16^2) + (14 × 16^1) + (10 × 16^0)<br>       &#x3D; (15 × 4096) + (15 × 256) + (14 × 16) + (10 × 1)<br>       &#x3D; 61440 + 3840 + 224 + 10 &#x3D; 65514（十进制）。</p>
<h3 id="常见值的记忆"><a href="#常见值的记忆" class="headerlink" title="常见值的记忆"></a>常见值的记忆</h3><p> 记住一些常见的十六进制和二进制、十进制的对应关系，比如：<br>0xFF &#x3D; 255（十进制），1111 1111（二进制）<br>0xF &#x3D; 15（十进制），1111（二进制）<br>0xA &#x3D; 10（十进制），1010（二进制</p>
<h3 id="关于进制的一些基础概念"><a href="#关于进制的一些基础概念" class="headerlink" title="关于进制的一些基础概念"></a>关于进制的一些基础概念</h3><p>进制是一种数学计数法，用于表示数字的基数和权值。常见的进制有二进制、八进制、十进制和十六进制等。<br>深刻理解进制的概念，有助于我们更好地理解计算机中的数据表示和转换。非常有意义</p>
<h4 id="基数"><a href="#基数" class="headerlink" title="基数"></a>基数</h4><p>十进制是以10为基数的系统，二进制是以2为基数的系统,以此类推。为了理解它们的对应关系，我们首先来看它们的基础概念。</p>
<h5 id="1-十进制"><a href="#1-十进制" class="headerlink" title="1. 十进制"></a>1. 十进制</h5><ul>
<li><p><strong>十进制使用 0 到 9 共 10 个数字，每一位表示一个数位，每一位的权重是 10 的幂次：</strong></p>
<ul>
<li><p>例如，十进制数 137 表示：</p>
<p>137 &#x3D; (1 × 10²) + (3 × 10¹) + (7 × 10⁰)</p>
</li>
</ul>
</li>
</ul>
<h5 id="2-二进制"><a href="#2-二进制" class="headerlink" title="2. 二进制"></a>2. 二进制</h5><ul>
<li><p><strong>二进制使用 0 和 1 两个数字，每一位的权重是 2 的幂次：</strong></p>
<ul>
<li><p>例如，二进制数 1011 表示：</p>
<p>1011 &#x3D; (1 × 2³) + (0 × 2²) + (1 × 2¹) + (1 × 2⁰)</p>
</li>
</ul>
</li>
</ul>
<h2 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h2><figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.global</span> _start</span><br><span class="line"></span><br><span class="line"><span class="symbol">.text</span></span><br><span class="line"><span class="symbol">_start:</span></span><br><span class="line">    <span class="keyword">MOV</span> <span class="built_in">X0</span>, <span class="number">#1</span>         <span class="comment">// 将X0寄存器设置为1 (stdout)</span></span><br><span class="line">    <span class="keyword">LDR</span> <span class="built_in">X1</span>, <span class="symbol">=message</span>   <span class="comment">// 将消息的地址加载到X1</span></span><br><span class="line">    <span class="keyword">MOV</span> <span class="built_in">X2</span>, <span class="number">#13</span>        <span class="comment">// 设置消息的长度 (13字节)</span></span><br><span class="line">    <span class="keyword">MOV</span> <span class="built_in">X8</span>, <span class="number">#64</span>        <span class="comment">// 系统调用号 (sys_write)</span></span><br><span class="line">    <span class="keyword">SVC</span> <span class="number">0</span>              <span class="comment">// 触发系统调用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">MOV</span> <span class="built_in">X8</span>, <span class="number">#93</span>        <span class="comment">// 系统调用号 (sys_exit)</span></span><br><span class="line">    <span class="keyword">SVC</span> <span class="number">0</span>              <span class="comment">// 触发系统调用</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">.data</span></span><br><span class="line"><span class="symbol">message:</span></span><br><span class="line">    <span class="meta">.ascii</span> <span class="string">&quot;Hello, ARM!\n&quot;</span></span><br></pre></td></tr></table></figure>
<p>这段代码的功能是输出 “Hello, ARM!” 并退出程序。下面是代码的执行过程：</p>
<h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><p>.global _start<br>  @@global _start 指示链接器这个程序的入口点是 _start，即程序从这里开始执行。操作系统会寻找这个 _start 标签，作为程序执行的起点。<br>.text<br>  @@.text 表示接下来是代码段，所有的指令都将在这个段中执行。<br>_start:<br>  @@这是程序的入口，操作系统在加载程序时会跳到这个标签开始执行指令。</p>
<h3 id="调用-sys-write-系统调用的过程："><a href="#调用-sys-write-系统调用的过程：" class="headerlink" title="调用 sys_write 系统调用的过程："></a>调用 sys_write 系统调用的过程：</h3><p>设置 X0：文件描述符（File Descriptor），1 表示标准输出（终端）。即 X0 &#x3D; 1 表示写入到终端（stdout）。<br>设置 X1：要写入的数据的地址，X1 中存放的是指向消息的内存地址。<br>设置 X2：要写入的数据的长度，X2 中存放的是数据的字节长度（例如，字符串的长度）。<br>设置 X8：X8 中存放的是系统调用号。sys_write 的调用号是 64，所以 X8 &#x3D; 64。<br>触发 SVC 0：SVC（Supervisor Call）用于触发系统调用。SVC 0 使处理器从用户态切换到内核态，执行指定的系统调用（这里是 sys_write）。<br>总结：<br>X0：文件描述符（1 表示写入到终端）。<br>X1：要写入的数据的内存地址。<br>X2：要写入的数据的长度。<br>X8：系统调用号，64 表示 sys_write。<br>SVC 0：触发系统调用，将上述寄存器的值传递给操作系统，由操作系统执行写入操作。<br>这个流程用于通过 sys_write 将数据输出到终端或其他文件描述符。</p>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
  </entry>
  <entry>
    <title>arm汇编学习笔记3-寄存器</title>
    <url>/2024/09/12/arm_example3/</url>
    <content><![CDATA[<h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><p>AArch64 提供了 31 个 64 位的通用寄存器，编号从 X0 到 X30。这些寄存器可以用于存储数据、传递函数参数等。<br>每个 64 位寄存器都可以被当作 32 位寄存器使用，此时使用的前缀是 W（比如 X0 的低 32 位可以通过 W0 访问）。</p>
<span id="more"></span>
<ul>
<li>X0 - X7：用于系统调用和函数调用时的参数传递和返回值存储。</li>
<li>X8：通常用于存储系统调用号。</li>
<li>X9 - X15：用于临时存储数据。</li>
<li>X16 - X17：<strong>Intra-Procedure Call（IPC）</strong>寄存器，通常用于在函数调用中作为临时值存储或帮助跳转</li>
<li>X18：<strong>Platform Register</strong>，用于存储平台相关的信息。</li>
<li>X19 - X28：保存寄存器（callee-saved），这些寄存器在函数调用之间的值需要被保存。</li>
<li>X29：<strong>Frame Pointer</strong>，用于指向当前函数的栈帧。</li>
<li>X30：<strong>Link Register</strong>，用于存储返回地址。</li>
</ul>
<h3 id="64-位寄存器（X-和-W）："><a href="#64-位寄存器（X-和-W）：" class="headerlink" title="64 位寄存器（X 和 W）："></a>64 位寄存器（X 和 W）：</h3><ul>
<li>X0-X30：每个寄存器为 64 位（8 字节），可用于处理 64 位数据。</li>
<li>W0-W30：每个寄存器为 32 位（4 字节），可用于处理 32 位数据。</li>
</ul>
<h3 id="特殊寄存器："><a href="#特殊寄存器：" class="headerlink" title="特殊寄存器："></a>特殊寄存器：</h3><ul>
<li>SP（X31）：栈指针，用于指向当前栈顶。栈指针在 64 位架构中也是一个非常重要的寄存器，指向栈顶。每次函数调用时，栈指针会调整以便为局部变量分配空间。</li>
<li>PC：程序计数器，用于存储当前指令的地址。</li>
<li>X29：帧指针，用于指向当前函数的栈帧。帧指针存储当前栈帧的基地址，帮助在函数调用中追踪局部变量和保存调用上下文。</li>
<li>XZR &#x2F; WZR（Zero Register）：这是一个特殊的寄存器，它始终为零。当你将数据写入 XZR 时，数据会被丢弃；当你从 XZR 读取数据时，它始终返回零。</li>
</ul>
<h3 id="程序状态寄存器（Current-Program-Status-Register-CPSR）"><a href="#程序状态寄存器（Current-Program-Status-Register-CPSR）" class="headerlink" title="程序状态寄存器（Current Program Status Register, CPSR）"></a>程序状态寄存器（Current Program Status Register, CPSR）</h3><p>CPSR 在 64 位架构下称为 PSTATE，它用于存储程序执行时的重要状态信息，比如条件标志、处理器模式、异常状态等。最重要的几个位是条件标志位，这些标志可以帮助处理条件执行的指令。</p>
<ul>
<li>N（Negative）标志位：表示结果是负数。</li>
<li>Z（Zero）标志位：表示结果为零。</li>
<li>C（Carry）标志位：表示无符号数运算时的进位。</li>
<li>V（Overflow）标志位：表示有符号数运算时的溢出。<br>这些条件标志位常用于条件执行指令，例如 CBZ（compare and branch if zero） 和 CBNZ（compare and branch if not zero）。</li>
</ul>
<h3 id="位系统调用的寄存器使用"><a href="#位系统调用的寄存器使用" class="headerlink" title="位系统调用的寄存器使用"></a>位系统调用的寄存器使用</h3><p>在 AArch64 中，系统调用的参数和调用号通过以下寄存器传递：</p>
<p>X0-X7：传递系统调用的参数。<br>X8：传递系统调用号。<br>svc 0：执行系统调用。</p>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
  </entry>
  <entry>
    <title>arm汇编学习笔记2-系统调用</title>
    <url>/2024/09/11/arm_example2/</url>
    <content><![CDATA[<p>和其他高级语言一样，汇编语言也需要与操作系统进行交互，这就需要使用系统调用。系统调用是操作系统提供给用户程序的接口.</p>
<span id="more"></span>
<h2 id="程序退出"><a href="#程序退出" class="headerlink" title="程序退出"></a>程序退出</h2><p>与许多高级语言不同，汇编程序在你停止编写代码后并不会优雅地退出。如果你不明确退出程序，计算机会继续在内存中读取指令，<br>直到读到最后一个操作码为止。因为你是在 *nix 环境中运行，当它读取到你无权访问的内存时，<br>你会遇到段错误（segmentation fault）。如果这是一个嵌入式解决方案（没有操作系统），这就是典型的未定义行为。<br>下面是一个AArch64 版本的程序退出的例子：</p>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">x0</span>, <span class="number">#0</span>   <span class="comment">@ 参数 1，0 表示正常退出</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">x8</span>, <span class="number">#93</span>  <span class="comment">@ 系统调用号 93 (sys_exit)</span></span><br><span class="line"><span class="keyword">svc</span> <span class="number">0</span>        <span class="comment">@ 触发系统调用</span></span><br></pre></td></tr></table></figure>
<p>1 mov X8, #93</p>
<ul>
<li>在 AArch64 中，系统调用号存放在寄存器 X8 中。</li>
<li>93 是 sys_exit 系统调用的编号。这个编号告诉操作系统我们希望执行退出操作。</li>
<li>在 ARM64 架构下，系统调用号是通过 X8 传递给内核的<br>2 mov X0, #0</li>
<li>系统调用的第一个参数通常放在寄存器 X0 中。对于 sys_exit 调用，X0 中存储的是退出状态码。</li>
<li>0 表示正常退出，非 0 值表示异常退出。<br>3 svc 0</li>
<li>svc 指令是触发系统调用的指令。在 AArch64 中，svc 0 是触发系统调用的标准方式。</li>
<li>系统会读取 X0 中的退出码并终止程序系统会读取 X0 中的退出码并终止程序</li>
</ul>
<h2 id="系统调用表"><a href="#系统调用表" class="headerlink" title="系统调用表"></a>系统调用表</h2><p>上面讲了退出程序，使用了93号系统调用。那么其他系统调用呢？这就需要查看系统调用表了。系统调用表是一个由操作系统提供的表<br>，其中包含了所有系统调用的编号和对应的功能。在 Linux 中，你可以在 &#x2F;usr&#x2F;include&#x2F;asm&#x2F;unistd.h 文件中找到这个表。<br>这个文件包含了所有系统调用的编号，以及它们的功能。你可以在这个文件中找到 sys_exit 的编号是 93。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -w <span class="string">&quot;sys_exit&quot;</span> /usr/include/asm/unistd.h</span><br></pre></td></tr></table></figure>
<p>以下列出常用的系统调用：</p>
<h3 id="常用系统调用表-AArch64"><a href="#常用系统调用表-AArch64" class="headerlink" title="常用系统调用表 (AArch64)"></a>常用系统调用表 (AArch64)</h3><table>
<thead>
<tr>
<th>系统调用</th>
<th>系统调用号</th>
<th>描述</th>
<th>参数</th>
</tr>
</thead>
<tbody><tr>
<td><code>sys_read</code></td>
<td>63</td>
<td>从文件描述符中读取数据</td>
<td>X0 &#x3D; 文件描述符，X1 &#x3D; 缓冲区指针，X2 &#x3D; 读取字节数</td>
</tr>
<tr>
<td><code>sys_write</code></td>
<td>64</td>
<td>向文件描述符中写入数据</td>
<td>X0 &#x3D; 文件描述符，X1 &#x3D; 缓冲区指针，X2 &#x3D; 写入字节数</td>
</tr>
<tr>
<td><code>sys_openat</code></td>
<td>56</td>
<td>打开文件</td>
<td>X0 &#x3D; AT_FDCWD，X1 &#x3D; 文件名，X2 &#x3D; 标志，X3 &#x3D; 模式（可选）</td>
</tr>
<tr>
<td><code>sys_close</code></td>
<td>57</td>
<td>关闭文件描述符</td>
<td>X0 &#x3D; 文件描述符</td>
</tr>
<tr>
<td><code>sys_exit</code></td>
<td>93</td>
<td>退出程序</td>
<td>X0 &#x3D; 退出状态码</td>
</tr>
<tr>
<td><code>sys_exit_group</code></td>
<td>94</td>
<td>退出进程组</td>
<td>X0 &#x3D; 退出状态码</td>
</tr>
<tr>
<td><code>sys_fork</code></td>
<td>220</td>
<td>创建子进程</td>
<td>无参数</td>
</tr>
<tr>
<td><code>sys_execve</code></td>
<td>221</td>
<td>执行程序</td>
<td>X0 &#x3D; 文件名，X1 &#x3D; 参数指针数组，X2 &#x3D; 环境变量指针数组</td>
</tr>
<tr>
<td><code>sys_getpid</code></td>
<td>172</td>
<td>获取当前进程的 PID</td>
<td>无参数</td>
</tr>
<tr>
<td><code>sys_kill</code></td>
<td>129</td>
<td>发送信号给进程</td>
<td>X0 &#x3D; PID，X1 &#x3D; 信号编号</td>
</tr>
<tr>
<td><code>sys_mmap</code></td>
<td>222</td>
<td>映射内存</td>
<td>X0 &#x3D; 地址，X1 &#x3D; 大小，X2 &#x3D; 保护标志，X3 &#x3D; 映射标志，X4 &#x3D; 文件描述符，X5 &#x3D; 偏移量</td>
</tr>
<tr>
<td><code>sys_munmap</code></td>
<td>215</td>
<td>解除内存映射</td>
<td>X0 &#x3D; 地址，X1 &#x3D; 大小</td>
</tr>
<tr>
<td><code>sys_brk</code></td>
<td>214</td>
<td>改变数据段终止位置</td>
<td>X0 &#x3D; 数据段终止位置</td>
</tr>
<tr>
<td><code>sys_nanosleep</code></td>
<td>101</td>
<td>休眠一段时间</td>
<td>X0 &#x3D; 睡眠时间指针，X1 &#x3D; 剩余时间指针</td>
</tr>
<tr>
<td><code>sys_gettimeofday</code></td>
<td>169</td>
<td>获取当前时间</td>
<td>X0 &#x3D; struct timeval 指针，X1 &#x3D; struct timezone 指针</td>
</tr>
<tr>
<td><code>sys_time</code></td>
<td>201</td>
<td>获取时间（以秒为单位）</td>
<td>X0 &#x3D; 时间指针</td>
</tr>
<tr>
<td><code>sys_unlinkat</code></td>
<td>35</td>
<td>删除文件</td>
<td>X0 &#x3D; 文件描述符，X1 &#x3D; 文件路径，X2 &#x3D; 标志</td>
</tr>
<tr>
<td><code>sys_mkdirat</code></td>
<td>34</td>
<td>创建目录</td>
<td>X0 &#x3D; 文件描述符，X1 &#x3D; 目录路径，X2 &#x3D; 权限</td>
</tr>
<tr>
<td><code>sys_chdir</code></td>
<td>49</td>
<td>改变当前工作目录</td>
<td>X0 &#x3D; 目录路径指针</td>
</tr>
<tr>
<td><code>sys_getcwd</code></td>
<td>17</td>
<td>获取当前工作目录</td>
<td>X0 &#x3D; 缓冲区指针，X1 &#x3D; 缓冲区大小</td>
</tr>
<tr>
<td><code>sys_dup</code></td>
<td>23</td>
<td>复制文件描述符</td>
<td>X0 &#x3D; 文件描述符</td>
</tr>
<tr>
<td><code>sys_dup2</code></td>
<td>24</td>
<td>复制文件描述符到指定的文件描述符</td>
<td>X0 &#x3D; 原文件描述符，X1 &#x3D; 新文件描述符</td>
</tr>
<tr>
<td><code>sys_fstat</code></td>
<td>80</td>
<td>获取文件状态</td>
<td>X0 &#x3D; 文件描述符，X1 &#x3D; struct stat 指针</td>
</tr>
<tr>
<td><code>sys_lseek</code></td>
<td>62</td>
<td>设置文件偏移量</td>
<td>X0 &#x3D; 文件描述符，X1 &#x3D; 偏移量，X2 &#x3D; 偏移方式</td>
</tr>
</tbody></table>
<h3 id="sys-write-调用例子"><a href="#sys-write-调用例子" class="headerlink" title="sys_write 调用例子"></a>sys_write 调用例子</h3><p>下面是一个简单的例子，展示了如何使用 sys_write 系统调用向标准输出写入数据：</p>
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.global</span> _start</span><br><span class="line"></span><br><span class="line"><span class="symbol">_start:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X0</span>, <span class="number">#1</span>          <span class="comment">// 文件描述符 1 (标准输出)</span></span><br><span class="line">    <span class="keyword">ldr</span> <span class="built_in">X1</span>, <span class="symbol">=message</span>    <span class="comment">// 将消息的地址加载到 X1</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X2</span>, <span class="number">#13</span>         <span class="comment">// 消息的长度为 13 字节</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X8</span>, <span class="number">#64</span>         <span class="comment">// 系统调用号 64 (sys_write)</span></span><br><span class="line">    <span class="keyword">svc</span> <span class="number">0</span>               <span class="comment">// 触发系统调用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X0</span>, <span class="number">#0</span>          <span class="comment">// 设置退出码为 0 (正常退出)</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X8</span>, <span class="number">#93</span>         <span class="comment">// 系统调用号 93 (sys_exit)</span></span><br><span class="line">    <span class="keyword">svc</span> <span class="number">0</span>               <span class="comment">// 触发系统调用</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">.data</span></span><br><span class="line"><span class="symbol">message:</span></span><br><span class="line">    <span class="meta">.ascii</span> <span class="string">&quot;Hello, ARM!\n&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用-sys-gettimeofday-获取当前时间（精确到微秒）："><a href="#使用-sys-gettimeofday-获取当前时间（精确到微秒）：" class="headerlink" title="使用 sys_gettimeofday 获取当前时间（精确到微秒）："></a>使用 sys_gettimeofday 获取当前时间（精确到微秒）：</h3><figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.global</span> _start</span><br><span class="line"></span><br><span class="line"><span class="symbol">_start:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X0</span>, <span class="symbol">#timeval</span>       <span class="comment">// 指向 struct timeval 的指针</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X1</span>, <span class="number">#0</span>             <span class="comment">// 不关心时区信息</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X8</span>, <span class="number">#169</span>           <span class="comment">// 系统调用号 169 (sys_gettimeofday)</span></span><br><span class="line">    <span class="keyword">svc</span> <span class="number">0</span>                  <span class="comment">// 触发系统调用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X0</span>, <span class="number">#0</span>             <span class="comment">// 正常退出</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X8</span>, <span class="number">#93</span>            <span class="comment">// 系统调用号 93 (sys_exit)</span></span><br><span class="line">    <span class="keyword">svc</span> <span class="number">0</span>                  <span class="comment">// 触发系统调用</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">.data</span></span><br><span class="line"><span class="symbol">timeval:</span></span><br><span class="line">    <span class="meta">.space</span> <span class="number">16</span>              <span class="comment">// 用于存储时间的 struct timeval</span></span><br><span class="line"><span class="symbol">.global</span> _start</span><br><span class="line"></span><br><span class="line"><span class="symbol">_start:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X0</span>, <span class="symbol">#timeval</span>       <span class="comment">// 指向 struct timeval 的指针</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X1</span>, <span class="number">#0</span>             <span class="comment">// 不关心时区信息</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X8</span>, <span class="number">#169</span>           <span class="comment">// 系统调用号 169 (sys_gettimeofday)</span></span><br><span class="line">    <span class="keyword">svc</span> <span class="number">0</span>                  <span class="comment">// 触发系统调用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X0</span>, <span class="number">#0</span>             <span class="comment">// 正常退出</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X8</span>, <span class="number">#93</span>            <span class="comment">// 系统调用号 93 (sys_exit)</span></span><br><span class="line">    <span class="keyword">svc</span> <span class="number">0</span>                  <span class="comment">// 触发系统调用</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">.data</span></span><br><span class="line"><span class="symbol">timeval:</span></span><br><span class="line">    <span class="meta">.space</span> <span class="number">16</span>              <span class="comment">// 用于存储时间的 struct timeval</span></span><br></pre></td></tr></table></figure>
<h3 id="使用-sys-time-获取当前时间戳（精确到秒）："><a href="#使用-sys-time-获取当前时间戳（精确到秒）：" class="headerlink" title="使用 sys_time 获取当前时间戳（精确到秒）："></a>使用 sys_time 获取当前时间戳（精确到秒）：</h3><figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.global</span> _start</span><br><span class="line"></span><br><span class="line"><span class="symbol">_start:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X0</span>, <span class="number">#0</span>             <span class="comment">// 直接返回时间戳</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X8</span>, <span class="number">#201</span>           <span class="comment">// 系统调用号 201 (sys_time)</span></span><br><span class="line">    <span class="keyword">svc</span> <span class="number">0</span>                  <span class="comment">// 触发系统调用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X0</span>, <span class="number">#0</span>             <span class="comment">// 正常退出</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X8</span>, <span class="number">#93</span>            <span class="comment">// 系统调用号 93 (sys_exit)</span></span><br><span class="line">    <span class="keyword">svc</span> <span class="number">0</span>                  <span class="comment">// 触发系统调用</span></span><br></pre></td></tr></table></figure>
<h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p>下面是一个在当前目录下创建一个名为 abc.txt 的文件，并向其中写入 “Hello, World!” 的 AArch64 汇编示例。</p>
<ul>
<li>sys_openat (系统调用号 56)：用于打开或创建文件。</li>
<li>sys_write (系统调用号 64)：用于向文件写入数据。</li>
<li>sys_close (系统调用号 57)：用于关闭文件。<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.section</span> <span class="meta">.data</span></span><br><span class="line"><span class="symbol">filename:</span></span><br><span class="line">    <span class="meta">.ascii</span> <span class="string">&quot;abc.txt\n&quot;</span>             <span class="comment">// 要创建的文件名</span></span><br><span class="line"><span class="symbol">message:</span></span><br><span class="line">    <span class="meta">.ascii</span> <span class="string">&quot;Hello, World!\n&quot;</span>       <span class="comment">// 要写入文件的内容</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">.section</span> <span class="meta">.text</span></span><br><span class="line"><span class="symbol">.global</span> _start</span><br><span class="line"></span><br><span class="line"><span class="symbol">_start:</span></span><br><span class="line">    <span class="comment">// 打开或创建 abc.txt 文件</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X0</span>, #-<span class="number">100</span>                  <span class="comment">// dirfd = AT_FDCWD (-100)，表示当前工作目录</span></span><br><span class="line">    <span class="keyword">ldr</span> <span class="built_in">X1</span>, <span class="symbol">=filename</span>              <span class="comment">// pathname = &quot;abc.txt&quot;</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X2</span>, <span class="number">#0101</span>                  <span class="comment">// flags = O_WRONLY | O_CREAT (0x101)</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X3</span>, <span class="number">#0644</span>                  <span class="comment">// mode = 0644 (八进制权限)</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X8</span>, <span class="number">#56</span>                    <span class="comment">// 系统调用号 56 (sys_openat)</span></span><br><span class="line">    <span class="keyword">svc</span> <span class="number">0</span>                          <span class="comment">// 触发系统调用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存文件描述符</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X9</span>, <span class="built_in">X0</span>                     <span class="comment">// 把返回的文件描述符存到 X9 中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向文件写入 &quot;Hello, World!&quot;</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X0</span>, <span class="built_in">X9</span>                     <span class="comment">// 文件描述符</span></span><br><span class="line">    <span class="keyword">ldr</span> <span class="built_in">X1</span>, <span class="symbol">=message</span>               <span class="comment">// 要写入的数据的地址</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X2</span>, <span class="number">#14</span>                    <span class="comment">// 要写入的数据长度 (14 字节)</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X8</span>, <span class="number">#64</span>                    <span class="comment">// 系统调用号 64 (sys_write)</span></span><br><span class="line">    <span class="keyword">svc</span> <span class="number">0</span>                          <span class="comment">// 触发系统调用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭文件</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X0</span>, <span class="built_in">X9</span>                     <span class="comment">// 文件描述符</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X8</span>, <span class="number">#57</span>                    <span class="comment">// 系统调用号 57 (sys_close)</span></span><br><span class="line">    <span class="keyword">svc</span> <span class="number">0</span>                          <span class="comment">// 触发系统调用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 退出程序</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X0</span>, <span class="number">#0</span>                     <span class="comment">// 退出码为 0 (正常退出)</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">X8</span>, <span class="number">#93</span>                    <span class="comment">// 系统调用号 93 (sys_exit)</span></span><br><span class="line">    <span class="keyword">svc</span> <span class="number">0</span>                          <span class="comment">// 触发系统调用</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
  </entry>
  <entry>
    <title>arm汇编学习笔记4-函数调用(2)</title>
    <url>/2024/09/17/arm_example5/</url>
    <content><![CDATA[<p>上一篇简单的介绍了函数调用的基本概念，本文将继续深入讲解 AArch64 64位架构 下的函数调用机制，包括调用约定、栈管理、寄存器使用、以及函数调用返回机制等。<br>此篇文章以aar64架构为例，介绍函数调用的栈帧结构、栈帧指针（fp）和栈指针（sp）的角色，以及栈帧的创建和销毁过程。</p>
<span id="more"></span>
<h2 id="栈帧（Stack-Frame）的定义"><a href="#栈帧（Stack-Frame）的定义" class="headerlink" title="栈帧（Stack Frame）的定义"></a>栈帧（Stack Frame）的定义</h2><p>栈帧 是每个函数调用在栈上分配的一块独立内存区域，用于存储函数的局部变量、参数、返回地址以及保存的寄存器等信息。<br>通过栈帧，函数能够独立地执行，而不会干扰其他函数的执行状态。</p>
<h3 id="帧指针（fp）和栈指针（sp）的角色"><a href="#帧指针（fp）和栈指针（sp）的角色" class="headerlink" title="帧指针（fp）和栈指针（sp）的角色"></a>帧指针（fp）和栈指针（sp）的角色</h3><p>在 AArch64 架构中，帧指针（fp 或 x29） 和 栈指针（sp） 一起构成了函数内部的 栈帧（Stack Frame）</p>
<ul>
<li>帧指针（Frame Pointer，fp）：指向当前栈帧的基地址，用于访问局部变量和恢复栈帧。在aa64架构中，帧指针通常用 x29 寄存器表示。<ul>
<li>作用：<ul>
<li>提供一个稳定的基址，用于访问栈帧中的参数和局部变量</li>
<li>维护调用链，通过保存前一个栈帧的 fp，形成帧指针链（Frame Pointer Chain），便于栈回溯和调试</li>
</ul>
</li>
<li>特性 <ul>
<li>在函数调用过程中，fp 的值不会改变，除非函数调用结束后，恢复前一个栈帧的 fp</li>
<li>fp 通常指向栈帧的底部，即栈帧的最高地址,sp指向栈帧的顶部，即栈帧的最低地址</li>
</ul>
</li>
</ul>
</li>
<li>栈指针（Stack Pointer，sp）：指向当前栈的顶部，用于分配和释放栈空间。在aa64架构中，栈指针通常用 x31 寄存器表示。<ul>
<li>作用： <ul>
<li>指向当前栈顶（低地址），用于动态分配和释放栈空间。</li>
<li>管理函数内部的局部变量和临时数据。</li>
<li>在aar64架构中，地址向下增长，栈指针（sp）的值会随着数据的压栈而减小</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="帧指针和栈指针如何构成栈帧"><a href="#帧指针和栈指针如何构成栈帧" class="headerlink" title="帧指针和栈指针如何构成栈帧"></a>帧指针和栈指针如何构成栈帧</h2><h3 id="栈的增长方向"><a href="#栈的增长方向" class="headerlink" title="栈的增长方向"></a>栈的增长方向</h3><pre><code>在 AArch64 架构中，栈是向低地址方向增长的。也就是说：
- 向栈中压入数据时，sp 减小
- 释放栈空间时，sp 增加。
</code></pre>
<h3 id="栈帧的布局"><a href="#栈帧的布局" class="headerlink" title="栈帧的布局"></a>栈帧的布局</h3><pre><code>一个典型的栈帧布局如下
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line">    高地址</span><br><span class="line">+-----------------------------+ &lt;- <span class="built_in">fp</span> (<span class="built_in">x29</span>)</span><br><span class="line"><span class="title">|      保存的旧 fp (x29)       |</span></span><br><span class="line">+-----------------------------+</span><br><span class="line"><span class="title">|       保存的 lr (x30)        |</span></span><br><span class="line">+-----------------------------+</span><br><span class="line"><span class="title">|       函数参数（如果在栈上）  |</span></span><br><span class="line">+-----------------------------+</span><br><span class="line"><span class="title">|        局部变量              |</span></span><br><span class="line">+-----------------------------+</span><br><span class="line"><span class="title">|        临时数据              |</span></span><br><span class="line">+-----------------------------+</span><br><span class="line"><span class="title">|                             |</span> &lt;- <span class="built_in">sp</span></span><br><span class="line">+-----------------------------+ &lt;- 低地址</span><br></pre></td></tr></table></figure>
</code></pre>
<h3 id="典型的函数栈帧开头和结尾"><a href="#典型的函数栈帧开头和结尾" class="headerlink" title="典型的函数栈帧开头和结尾"></a>典型的函数栈帧开头和结尾</h3><pre><code>- 在函数入口处
  - 保存存前一个栈帧(调用者)的帧指针和返回地址
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">stp</span> <span class="built_in">x29</span>, <span class="built_in">x30</span>, [<span class="built_in">sp</span>, #-<span class="number">16</span>]!   <span class="comment">// 保存旧的 fp (x29) 和 lr (x30)，sp -= 16</span></span><br></pre></td></tr></table></figure>
  - 设置新的帧指针
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">x29</span>, <span class="built_in">sp</span>                 <span class="comment">// 设置新的 fp = sp</span></span><br></pre></td></tr></table></figure>
 - 分配栈空间用于局部变量
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sub</span> <span class="built_in">sp</span>, <span class="built_in">sp</span>, <span class="number">#16</span>             <span class="comment">// 分配16字节的栈空间</span></span><br></pre></td></tr></table></figure>
- 函数结尾
在函数退出前，尾声负责
  - 释放局部变量占用的栈空间 
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add</span> <span class="built_in">sp</span>, <span class="built_in">sp</span>, <span class="number">#16</span>             <span class="comment">// 释放16字节的栈空间</span></span><br></pre></td></tr></table></figure>
  - 恢复前一个栈帧的帧指针和返回地址
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">ldp</span> <span class="built_in">x29</span>, <span class="built_in">x30</span>, [<span class="built_in">sp</span>], <span class="number">#16</span>     <span class="comment">// 恢复旧的 fp (x29) 和 lr (x30)，sp += 16</span></span><br></pre></td></tr></table></figure>
  - 返回到调用者
<figure class="highlight arm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">ret</span>                         <span class="comment">// 返回到调用者</span></span><br></pre></td></tr></table></figure>
</code></pre>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
  </entry>
  <entry>
    <title>arm汇编学习笔记4-函数调用(1)</title>
    <url>/2024/09/12/arm_example4/</url>
    <content><![CDATA[<p>函数调用是程序执行中的核心机制之一，尤其是在现代处理器架构中，它关系到如何传递参数、保存上下文、返回结果等操作。接下来，<br>本文深入讲解 AArch64 64位架构 下的函数调用机制，包括调用约定、栈管理、寄存器使用、以及函数调用返回机制等。</p>
<span id="more"></span>
<h2 id="AArch64-函数调用约定"><a href="#AArch64-函数调用约定" class="headerlink" title="AArch64 函数调用约定"></a>AArch64 函数调用约定</h2><p>函数调用约定（Calling Convention）是处理器和操作系统规定的一套规则，用来决定函数调用时如何在寄存器和栈之间传递参数、保存上下文、返回值等。<br>AArch64 遵循的调用约定规定了参数传递、栈布局和返回值的规则。</p>
<h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><ul>
<li>X0 - X7：用于传递函数的前 8 个参数。如果函数需要传递超过 8 个参数，超出的部分会被传递到 栈 中。</li>
<li>X8 及更高的寄存器通常用于系统调用等特殊用途，而不会用于普通函数调用。</li>
</ul>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>函数的 返回值 通常通过 X0 和 X1 寄存器返回</p>
<ul>
<li>如果返回值是一个整数或指针类型（64 位或 32 位），它将存储在 X0 中。</li>
<li>如果函数返回两个值，X0 和 X1 会分别存储第一个和第二个返回值。</li>
<li>对于较大的返回值（如结构体），这些值可能通过栈传递。</li>
</ul>
<h3 id="保存调用者寄存器和被调用者寄存器"><a href="#保存调用者寄存器和被调用者寄存器" class="headerlink" title="保存调用者寄存器和被调用者寄存器"></a>保存调用者寄存器和被调用者寄存器</h3><ul>
<li>调用者保存寄存器（Caller-Saved Registers）：调用者在调用函数之前，负责保存它们的值，因为函数调用可能会覆盖这些寄存器的值。包括：X0-X15。</li>
<li>被调用者保存寄存器（Callee-Saved Registers）：被调用者必须在函数结束前恢复它们的值，包括：X19-X29。这些寄存器在函数调用期间不会被修改，<br>这相当于是一个规则的约定，因为在函数调用中，寄存器的值会被覆盖，如果要恢复就需要保存. X0-X15是调用者需要负责保存的寄存器，X19-X29是被调用者需要负责保存的寄存器。<br>除非函数主动保存和恢复它们的值。</li>
</ul>
<h2 id="函数调用过程详解"><a href="#函数调用过程详解" class="headerlink" title="函数调用过程详解"></a>函数调用过程详解</h2><h3 id="栈的使用"><a href="#栈的使用" class="headerlink" title="栈的使用"></a>栈的使用</h3><p>  栈是函数调用中保存数据的核心工具。AArch64 中的栈是向下生长的，也就是说，栈指针（SP）的值会随着数据的压栈而减小。</p>
<ul>
<li>栈指针（SP）：指向当前栈的顶部。每次调用函数时，栈指针会移动以腾出空间存储局部变量、溢出的参数和保存寄存器。</li>
<li>保存当前栈帧的基地址，便于追踪局部变量和恢复栈帧。每个函数调用时，新的栈帧会被创建，并将前一个栈帧的地址存入栈中，以便函数调用结束后恢复调用者的上下文。</li>
</ul>
<h3 id="函数调用的步骤"><a href="#函数调用的步骤" class="headerlink" title="函数调用的步骤"></a>函数调用的步骤</h3><h4 id="保存上下文"><a href="#保存上下文" class="headerlink" title="保存上下文"></a>保存上下文</h4><ul>
<li>调用者保存寄存器（Caller-Saved Registers）：调用者在调用函数之前，负责保存它们的值，因为函数调用可能会覆盖这些寄存器的值。包括：X0-X15。</li>
<li>保存返回地址：将返回地址存入栈中，以便函数调用结束后恢复调用者的上下文。</li>
<li>保存栈帧指针：保存当前栈帧的基地址，便于追踪局部变量和恢复栈帧。</li>
</ul>
<h4 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h4><ul>
<li>将函数参数传递到 X0 - X7 寄存器中，如果参数超过 8 个，剩余的参数会被传递到栈中。</li>
</ul>
<h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><p>使用 BL（Branch with Link）指令跳转到被调用函数，X30（Link Register）会保存返回地址。函数调用完成后，程序会通过 X30 返回调用者。</p>
<h4 id="执行函数体"><a href="#执行函数体" class="headerlink" title="执行函数体"></a>执行函数体</h4><p>被调用的函数会根据需要使用 X0-X7 中的参数，执行逻辑。<br>如果需要使用保存寄存器（X19-X29），函数需要先将这些寄存器的值保存到栈上。</p>
<h4 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h4><p>如果函数有返回值，它会将结果放入 X0 中返回。对于较复杂的返回值（如结构体），则可能会通过栈返回。</p>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
  </entry>
</search>
