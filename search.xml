<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>软件的 GP 公钥不匹配问题</title>
    <url>/2024/08/15/gpgErr/</url>
    <content><![CDATA[<p>在安装 MySQL 软件包时，系统找不到与该软件包匹配的 GPG 公钥，从而无法验证包的完整性,出现以下报错信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Failing package is: mysql-community-server-5.7.44-1.el7.x86_64</span><br><span class="line">GPG Keys are configured as: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="1-查看已安装的-GPG-公钥"><a href="#1-查看已安装的-GPG-公钥" class="headerlink" title="1, 查看已安装的 GPG 公钥"></a>1, 查看已安装的 GPG 公钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa gpg-pubkey</span><br></pre></td></tr></table></figure>
<h3 id="2-查看软件包的-GPG-公钥"><a href="#2-查看软件包的-GPG-公钥" class="headerlink" title="2, 查看软件包的 GPG 公钥"></a>2, 查看软件包的 GPG 公钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -q gpg-pubkey --qf <span class="string">&#x27;%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125; --&gt; %&#123;summary&#125;\n&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-导入软件包的-GPG-公钥"><a href="#3-导入软件包的-GPG-公钥" class="headerlink" title="3, 导入软件包的 GPG 公钥"></a>3, 导入软件包的 GPG 公钥</h3><p>在&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F; 查看是否有对应的 GPG 公钥文件，如果没有，可以从官方网站下载对应的 GPG 公钥文件，然后导入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure>
<h3 id="4-重新安装软件包"><a href="#4-重新安装软件包" class="headerlink" title="4, 重新安装软件包"></a>4, 重新安装软件包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum reinstall mysql-community-server</span><br></pre></td></tr></table></figure>
<h3 id="5-禁用-GPG-检查"><a href="#5-禁用-GPG-检查" class="headerlink" title="5,禁用 GPG 检查"></a>5,禁用 GPG 检查</h3><p>如果实在没办法导入 GPG 公钥，可以禁用 GPG 检查，但是不推荐。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mysql-community-server --nogpgcheck</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>-运维</category>
      </categories>
  </entry>
  <entry>
    <title>frida安装</title>
    <url>/2024/08/11/frida%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="安装frida客户端"><a href="#安装frida客户端" class="headerlink" title="安装frida客户端"></a>安装frida客户端</h2><p>客户端安装在上位机，就是负责给手机下发命令的电脑</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install frida-tools</span><br></pre></td></tr></table></figure>
<p>查看版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ frida --version</span><br></pre></td></tr></table></figure>
<p>我这边的版本是16.4.7,对应的frida-server版本也要选择是16.4.7</p>
<h2 id="安装frida-server"><a href="#安装frida-server" class="headerlink" title="安装frida-server"></a>安装frida-server</h2><p>服务端安装在手机上，就是负责接收上位机下发的命令的手机</p>
<span id="more"></span>
<p>下载地址：<a href="https://github.com/frida/frida/releases">https://github.com/frida/frida/releases</a><br>除了版本，还要注意手机的架构, 查看手机架构的方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> adb shell getprop ro.product.cpu.abi</span><br><span class="line"> 或者</span><br><span class="line">adb shell <span class="built_in">uname</span> -m</span><br></pre></td></tr></table></figure>
<p>我这边的手机是x86,所以我要下载x86版本的frida-server: frida-server-16.4.7-android-x86.xz</p>
<p>下载对应版本的frida-server，然后上传到手机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ adb push frida-server /data/local/tmp //这里要注意，为什么存放路径是/data/local/tmp，\n因为这个路径是手机的临时目录，</span><br><span class="line">不需要root权限，而且具有执行权限,一开始我放到/sdcard/目录下，一直报权限不足</span><br><span class="line"></span><br><span class="line">$ adb shell <span class="string">&quot;chmod 755 /data/local/tmp/frida-server&quot;</span></span><br><span class="line">$ adb shell <span class="string">&quot;/data/local/tmp/frida-server &amp;&quot;</span></span><br></pre></td></tr></table></figure>
<p>测试是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ frida-ps -U</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>逆向 - Frida</category>
      </categories>
  </entry>
  <entry>
    <title>mysqldump备份数据库</title>
    <url>/2024/08/15/mysqldump/</url>
    <content><![CDATA[<p>我们可以使用mysqldump命令备份MySQL数据库，mysqldump是MySQL数据库备份工具，可以将数据库备份为SQL文件，然后可以使用这个SQL文件恢复数据库。</p>
<span id="more"></span>
<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><h3 id="1-备份数据库"><a href="#1-备份数据库" class="headerlink" title="1, 备份数据库"></a>1, 备份数据库</h3><p>你要导出的数据库名为 source_db，并且你希望将导出的文件保存为 source_db.sql：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -u 用户名 -p 密码 source_db &gt; source_db.sql</span><br></pre></td></tr></table></figure>
<h3 id="2-备份所有数据库"><a href="#2-备份所有数据库" class="headerlink" title="2, 备份所有数据库"></a>2, 备份所有数据库</h3><p>如果你想备份所有数据库，可以使用–all-databases选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -u 用户名 -p --all-databases &gt; all_databases.sql</span><br></pre></td></tr></table></figure>
<h3 id="3-备份数据库结构"><a href="#3-备份数据库结构" class="headerlink" title="3, 备份数据库结构"></a>3, 备份数据库结构</h3><p>如果你只想备份数据库结构，可以使用–no-data选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -u 用户名 -p --no-data source_db &gt; source_db_structure.sql</span><br></pre></td></tr></table></figure>
<h3 id="4-备份数据库数据"><a href="#4-备份数据库数据" class="headerlink" title="4, 备份数据库数据"></a>4, 备份数据库数据</h3><p>如果你只想备份数据库数据，可以使用–no-create-info选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -u 用户名 -p --no-create-info source_db &gt; source_db_data.sql</span><br></pre></td></tr></table></figure>
<h3 id="5-备份数据库表"><a href="#5-备份数据库表" class="headerlink" title="5, 备份数据库表"></a>5, 备份数据库表</h3><p>如果你只想备份数据库中的某些表，可以使用–tables选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -u 用户名 -p source_db --tables table1 table2 &gt; source_db_tables.sql</span><br></pre></td></tr></table></figure>
<h2 id="导入恢复"><a href="#导入恢复" class="headerlink" title="导入恢复"></a>导入恢复</h2><h3 id="1-导入数据库"><a href="#1-导入数据库" class="headerlink" title="1, 导入数据库"></a>1, 导入数据库</h3><p>你可以使用以下命令将数据库导入到MySQL服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u 用户名 -p 密码 source_db &lt; source_db.sql</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>-运维</category>
      </categories>
  </entry>
  <entry>
    <title>centos 服务器安装</title>
    <url>/2024/08/14/hexoinstll/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>-运维</category>
      </categories>
  </entry>
  <entry>
    <title>centos 服务器安装</title>
    <url>/2024/08/14/serverInstall/</url>
    <content><![CDATA[<h2 id="1-安装nginx"><a href="#1-安装nginx" class="headerlink" title="1. 安装nginx"></a>1. 安装nginx</h2><p>   正常安装nginx，yum install nginx,报错<br>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">No package nginx available.</span><br><span class="line">Error: Nothing to <span class="keyword">do</span></span><br></pre></td></tr></table></figure></p>
<span id="more"></span>
<h3 id="解决方法1："><a href="#解决方法1：" class="headerlink" title="解决方法1："></a>解决方法1：</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install epel-release</span><br></pre></td></tr></table></figure>
<h3 id="解决方法2："><a href="#解决方法2：" class="headerlink" title="解决方法2："></a>解决方法2：</h3><pre><code>在nginx官方网站找到适合你系统的.rpm包，下载后执行以下命令安装：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> rpm -ivh nginx-1.12.2-1.el7.ngx.x86_64.rpm</span><br></pre></td></tr></table></figure>
</code></pre>
<h3 id="解决方法3："><a href="#解决方法3：" class="headerlink" title="解决方法3："></a>解决方法3：</h3><pre><code>更换yum源，安装nginx
</code></pre>
<h4 id="备份现有YUM源"><a href="#备份现有YUM源" class="headerlink" title="备份现有YUM源"></a>备份现有YUM源</h4><pre><code>在更改YUM源之前，建议先备份当前的YUM源配置，以便在需要时可以还原。
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -r /etc/yum.repos.d/ /etc/yum.repos.d.backup/</span><br></pre></td></tr></table></figure>
</code></pre>
<h4 id="更换为阿里云YUM源"><a href="#更换为阿里云YUM源" class="headerlink" title="更换为阿里云YUM源"></a>更换为阿里云YUM源</h4><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sed -e <span class="string">&#x27;s|^mirrorlist=|#mirrorlist=|g&#x27;</span> \</span><br><span class="line">     -e <span class="string">&#x27;s|^#baseurl=http://mirror.centos.org/centos|baseurl=https://mirrors.aliyun.com/centos|g&#x27;</span> \</span><br><span class="line">     -i.bak \</span><br><span class="line">     /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>
</code></pre>
<h4 id="清理YUM缓存并更新"><a href="#清理YUM缓存并更新" class="headerlink" title="清理YUM缓存并更新"></a>清理YUM缓存并更新</h4><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum clean all</span><br><span class="line"><span class="built_in">sudo</span> yum makecache</span><br></pre></td></tr></table></figure>
</code></pre>
<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install nginx</span><br></pre></td></tr></table></figure>
</code></pre>
<p>##2. 安装mysql5.7</p>
<h3 id="2-1-添加MySQL官方仓库"><a href="#2-1-添加MySQL官方仓库" class="headerlink" title="2.1 添加MySQL官方仓库"></a>2.1 添加MySQL官方仓库</h3><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"><span class="built_in">sudo</span> rpm -ivh mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure>
</code></pre>
<h3 id="2-2-安装MySQL"><a href="#2-2-安装MySQL" class="headerlink" title="2.2 安装MySQL"></a>2.2 安装MySQL</h3><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install mysql-community-server</span><br></pre></td></tr></table></figure>
</code></pre>
<h3 id="2-3-启动MySQL"><a href="#2-3-启动MySQL" class="headerlink" title="2.3 启动MySQL"></a>2.3 启动MySQL</h3><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start mysqld</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure>
</code></pre>
<h3 id="2-4-查看MySQL初始密码"><a href="#2-4-查看MySQL初始密码" class="headerlink" title="2.4 查看MySQL初始密码"></a>2.4 查看MySQL初始密码</h3><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br></pre></td></tr></table></figure>
</code></pre>
<h3 id="2-5-设置安全选项"><a href="#2-5-设置安全选项" class="headerlink" title="2.5 设置安全选项"></a>2.5 设置安全选项</h3><pre><code>使用mysql_secure_installation命令来配置安全设置（例如修改密码、删除匿名用户等）
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mysql_secure_installation</span><br></pre></td></tr></table></figure>
</code></pre>
]]></content>
      <categories>
        <category>-运维</category>
      </categories>
  </entry>
  <entry>
    <title>为域名申请SSL证书</title>
    <url>/2024/08/16/sslfordomain/</url>
    <content><![CDATA[<p><a href="https://zerossl.com/">https://zerossl.com/</a><br>这个服务商支持90天免费证书，可以申请一个证书，然后下载证书文件，然后在服务器上配置证书即可。<br>同时他支持Ip地址验证，可以通过验证ip地址来申请证书，这样就不需要域名了。<br>第一次申请应该需要注册一个账号，然后登录</p>
<span id="more"></span>
<h3 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h3><p>进入<a href="https://zerossl.com/">https://zerossl.com/</a> 后,登录,点击New Certificate<br><img src="/images/ssl1.png" alt="image"><br>输入域名，点击Next<br><img src="/images/ssl2.png" alt="image"><br>选择90-Day 点击Next<br><img src="/images/ssl3.png" alt="image"><br>点击Next<br><img src="/images/ssl4.png" alt="image"><br>关闭pay monthy ,点击Next<br><img src="/images/ssl5.png" alt="image"><br>选择Http File,点击Next<br><img src="/images/ssl7.png" alt="image"></p>
<h3 id="验证域名"><a href="#验证域名" class="headerlink" title="验证域名"></a>验证域名</h3><p>这一步是为了验证域名是归你管理的。根据提示，将文件下载下来，然后上传到服务器上,并且设置Ngixn的配置文件,使其外部可以访问到这个文件<br>上传文件到服务器上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp ~/Downloads/D1921001A5646DDD0E6CAE7FFDB5980D.txt root@156.xx.xx.xx:/var/www/html/.well-known/pki-validation</span><br></pre></td></tr></table></figure>
<p>修改Nginx配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim valid.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 156.xx.xx.xx;</span><br><span class="line"></span><br><span class="line">    location /.well-known/pki-validation/ &#123;</span><br><span class="line">        <span class="built_in">alias</span> /var/www/html/.well-known/pki-validation/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="comment"># 其他配置...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">重启nginx ，nginx -s reload</span><br></pre></td></tr></table></figure>
<p>然后回到zerossl 点击Next,进行验证<br>验证通过后，根据提示下载证书文件,文件包括证书文件，私钥文件，中间证书文件,将这些文件上传到服务器上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ca_bundle.crt</span><br><span class="line">private.key</span><br><span class="line">certificate.crt</span><br><span class="line">scp ~/Downloads/156.xxx.xxx.xxx.zip root@156.xxx.xx.xxx:/etc/nginx/ssl/ipssl</span><br></pre></td></tr></table></figure>
<h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       6532 ssl;</span><br><span class="line">    server_name  156.xx.xx.xx;</span><br><span class="line">    ssl_certificate      /etc/nginx/ssl/ipssl/certificate.crt;</span><br><span class="line">    ssl_certificate_key  /etc/nginx/ssl/ipssl/private.key;</span><br><span class="line"></span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_ciphers <span class="string">&quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384&quot;</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/abc11_proxy.access.log  main;</span><br><span class="line">    error_log   /var/log/nginx/abc11_proxy.error.log  error;</span><br><span class="line"></span><br><span class="line">    client_max_body_size 10m;</span><br><span class="line">    client_body_buffer_size 512k;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1024;</span><br><span class="line">    gzip_buffers 16 8k;</span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml image/jpeg image/gif image/png;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_set_header Authorization <span class="variable">$http_authorization</span>;</span><br><span class="line">        proxy_pass http://xx.xxxx.xx:6433;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>-运维</category>
      </categories>
  </entry>
  <entry>
    <title>启用ssh 证书登录</title>
    <url>/2024/08/15/sshLogin/</url>
    <content><![CDATA[<p>默认情况下，ssh 登录需要输入密码，为了提高安全性，可以使用证书登录</p>
<span id="more"></span>
<h2 id="1-生成密钥对"><a href="#1-生成密钥对" class="headerlink" title="1, 生成密钥对"></a>1, 生成密钥对</h2><p>在本地机器上生成密钥对，公钥和私钥，公钥用于上传到服务器，私钥用于本地登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p>这个命令会生成一个公钥（<del>&#x2F;.ssh&#x2F;id_rsa.pub）和一个私钥（</del>&#x2F;.ssh&#x2F;id_rsa）</p>
<h2 id="2-上传公钥到服务器"><a href="#2-上传公钥到服务器" class="headerlink" title="2, 上传公钥到服务器"></a>2, 上传公钥到服务器</h2><p>将公钥上传到服务器，可以使用scp命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub root@xxxxx:/root</span><br></pre></td></tr></table></figure>
<h2 id="3-将公钥添加到服务器的authorized-keys文件"><a href="#3-将公钥添加到服务器的authorized-keys文件" class="headerlink" title="3, 将公钥添加到服务器的authorized_keys文件"></a>3, 将公钥添加到服务器的authorized_keys文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<h2 id="4-修改sshd-config文件"><a href="#4-修改sshd-config文件" class="headerlink" title="4, 修改sshd_config文件"></a>4, 修改sshd_config文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">PubkeyAuthentication <span class="built_in">yes</span></span><br><span class="line">PasswordAuthentication no</span><br><span class="line">ChallengeResponseAuthentication no</span><br><span class="line">UsePAM no</span><br></pre></td></tr></table></figure>

<h2 id="5-重启sshd服务"><a href="#5-重启sshd服务" class="headerlink" title="5, 重启sshd服务"></a>5, 重启sshd服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>-运维</category>
      </categories>
  </entry>
  <entry>
    <title>yum 锁定问题</title>
    <url>/2024/08/15/yumErr/</url>
    <content><![CDATA[<p>当正在使用yum安装软件时，突然中断，再次使用yum安装软件时，会出现yum锁定问题，解决方法如下：</p>
<span id="more"></span>
<h3 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Another app is currently holding the yum lock; waiting <span class="keyword">for</span> it to <span class="built_in">exit</span>...</span><br><span class="line">  The other application is: yum</span><br><span class="line">    Memory :  74 M RSS (398 MB VSZ)</span><br><span class="line">    Started: Thu Aug 15 08:54:53 2024 - 1:28:07 ago</span><br><span class="line">    State  : Sleeping, pid: 22963</span><br></pre></td></tr></table></figure>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="1-查看yum进程"><a href="#1-查看yum进程" class="headerlink" title="1, 查看yum进程"></a>1, 查看yum进程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep yum</span><br></pre></td></tr></table></figure>
<h4 id="2-杀掉yum进程"><a href="#2-杀掉yum进程" class="headerlink" title="2, 杀掉yum进程"></a>2, 杀掉yum进程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 22963</span><br></pre></td></tr></table></figure>
<h4 id="3-删除yum锁文件"><a href="#3-删除yum锁文件" class="headerlink" title="3, 删除yum锁文件"></a>3, 删除yum锁文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f /var/run/yum.pid</span><br></pre></td></tr></table></figure>
<h4 id="4-清理yum缓存"><a href="#4-清理yum缓存" class="headerlink" title="4, 清理yum缓存"></a>4, 清理yum缓存</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure>
<h4 id="5-更新yum缓存"><a href="#5-更新yum缓存" class="headerlink" title="5, 更新yum缓存"></a>5, 更新yum缓存</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>-运维</category>
      </categories>
  </entry>
  <entry>
    <title>arm汇编学习笔记0</title>
    <url>/2024/09/06/arm_example0/</url>
    <content><![CDATA[<p>最新在学习arm汇编，经过全网搜索，决定以ARM Assembly By Example 这本书为主线进行学习，这里记录一下学习笔记。</p>
<h2 id="安装arm汇编编环境"><a href="#安装arm汇编编环境" class="headerlink" title="安装arm汇编编环境"></a>安装arm汇编编环境</h2><p>arm架构有32位和64位之分。下面分别介绍如何安装32位和64位的arm汇编编译器。由于我习惯用mac，所以这里只介绍mac下的安装方法。</p>
<h3 id="32位-arm汇编编译器安装"><a href="#32位-arm汇编编译器安装" class="headerlink" title="32位 arm汇编编译器安装"></a>32位 arm汇编编译器安装</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在arm的官网https://developer.arm.com/downloads/-/gnu-rm 下载对应的版本，这里我下载的是10.3-2021.10版本</span><br><span class="line">https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-mac.tar.bz2?rev=58ed196feb7b4ada8288ea521fa87ad5&amp;<span class="built_in">hash</span>=F095D2C3D1659B531BE482826BE4A6E1</span><br></pre></td></tr></table></figure>
<p>下载完成后，解压到指定目录<br>tar -xvf gcc-arm-none-eabi-10.3-2021.10-mac.tar.bz2 -C &#x2F;usr&#x2F;local<br>把解压后的目录加入到环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line">在文件末尾加入</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/gcc-arm-none-eabi-10.3-2021.10/bin</span><br></pre></td></tr></table></figure>
<p>这样就可以在终端使用arm-none-eabi-as和arm-none-eabi-ld命令了</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">目录里：</span><br><span class="line">/bin/arm-none-eabi-as //汇编器</span><br><span class="line">/bin/arm-none-eabi-ld //链接器</span><br><span class="line">就是我们需要的工具,可以通过下面的命令编译汇编文件，链接文件得到可以执行的文件hello</span><br><span class="line">下面是一个简单的基于32位arm的汇编文件,暂不理会其内容，只是用来测试编译器是否安装成功</span><br><span class="line">``` bash</span><br><span class="line">.global _start</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">_start:</span><br><span class="line">    MOV R0, <span class="comment">#1         // 将R0寄存器设置为1 (stdout)</span></span><br><span class="line">    LDR R1, =message   // 将消息的地址加载到R1</span><br><span class="line">    MOV R2, <span class="comment">#13        // 设置消息的长度 (13字节)</span></span><br><span class="line">    MOV R7, <span class="comment">#4         // 系统调用号 (sys_write)</span></span><br><span class="line">    SWI 0              // 触发系统调用</span><br><span class="line"></span><br><span class="line">    MOV R7, <span class="comment">#1         // 系统调用号 (sys_exit)</span></span><br><span class="line">    SWI 0              // 触发系统调用</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">message:</span><br><span class="line">    .ascii <span class="string">&quot;Hello, ARM!\n&quot;</span></span><br></pre></td></tr></table></figure>
<p>arm-none-eabi-as -o hello.o hello.s &#x2F;&#x2F;编译汇编文件<br>arm-none-eabi-ld -o hello hello.o &#x2F;&#x2F;链接文件</p>
<h3 id="64位-arm汇编编译器安装"><a href="#64位-arm汇编编译器安装" class="headerlink" title="64位 arm汇编编译器安装"></a>64位 arm汇编编译器安装</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install aarch64-linux-gnu-gcc</span><br></pre></td></tr></table></figure>
<p> aarch64-elf-as &#x2F;&#x2F;汇编器<br> aarch64-elf-ld &#x2F;&#x2F;链接器</p>
<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p> 以下是一个简单的基于65位arm的汇编文件,暂不理会其内容，只是用来测试编译器是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.global _start</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">_start:</span><br><span class="line">    MOV X0, <span class="comment">#1         // 将X0寄存器设置为1 (stdout)</span></span><br><span class="line">    LDR X1, =message   // 将消息的地址加载到X1</span><br><span class="line">    MOV X2, <span class="comment">#13        // 设置消息的长度 (13字节)</span></span><br><span class="line">    MOV X8, <span class="comment">#64        // 系统调用号 (sys_write)</span></span><br><span class="line">    SVC 0              // 触发系统调用</span><br><span class="line"></span><br><span class="line">    MOV X8, <span class="comment">#93        // 系统调用号 (sys_exit)</span></span><br><span class="line">    SVC 0              // 触发系统调用</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">message:</span><br><span class="line">    .ascii <span class="string">&quot;Hello, ARM!\n&quot;</span></span><br></pre></td></tr></table></figure>
<p>执行以下命令,得到可以在arm64架构上运行的hello文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aarch64-elf-as -o hello.o hello.s //编译汇编文件</span><br><span class="line">aarch64-elf-ld -o hello hello.o //链接文件</span><br></pre></td></tr></table></figure>
<h2 id="在mac中使用qemu模拟运行arm程序"><a href="#在mac中使用qemu模拟运行arm程序" class="headerlink" title="在mac中使用qemu模拟运行arm程序"></a>在mac中使用qemu模拟运行arm程序</h2><p>上面我们已知道了如何编译arm汇编文件，但是我们的mac是x86架构的，无法直接运行arm程序，这里我们使用qemu模拟器来运行arm程序<br>我将使用docker来安装qemu，这样可以避免一些不必要的麻烦</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull multiarch/qemu-user-static //首先，拉取包含 QEMU 用户模式仿真工具的 multiarch/qemu-user-static 镜像</span><br><span class="line">docker run --<span class="built_in">rm</span> --privileged multiarch/qemu-user-static --reset -p <span class="built_in">yes</span> //然后，运行容器以启用 QEMU 用户模式仿真,--privileged 选项是为了允许 QEMU 在主机系统上设置仿真。</span><br><span class="line">docker pull arm64v8/ubuntu //拉取你需要运行的架构的基础镜像。例如，如果你想运行 ARM64 程序，可以拉取 ARM64 的 Ubuntu 镜像</span><br><span class="line">docker run --<span class="built_in">rm</span> -t arm64v8/ubuntu <span class="built_in">uname</span> -m //这个命令会输出当前系统的架构。你应该看到输出为 aarch64，表示 QEMU 正在仿真 ARM64 架构。</span><br><span class="line">docker run --<span class="built_in">rm</span> -it -v $(<span class="built_in">pwd</span>)/hello1:/hello1 arm64v8/ubuntu /bin/bash //运行一个新容器，将你的程序挂载到容器中</span><br></pre></td></tr></table></figure>
<p>执行完上面的命令后，你会进入到一个ubuntu的容器中，这时候你可以执行下面的命令来运行你的arm程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./hello</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
  </entry>
  <entry>
    <title>记一次安卓root</title>
    <url>/2024/08/11/anroidroot/</url>
    <content><![CDATA[<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p> 我的手机是pixel3，所以我下载了对应的镜像，下载地址：<a href="https://developers.google.com/android/images?hl=zh-cn#blueline">https://developers.google.com/android/images?hl=zh-cn#blueline</a></p>
]]></content>
      <categories>
        <category>逆向</category>
      </categories>
  </entry>
  <entry>
    <title>记一次安卓编译过程</title>
    <url>/2024/08/19/oldandroidapp/</url>
    <content><![CDATA[<p>因为接手一个老项目，需要对安卓项目进行编译，但是项目中的很多依赖已经过时，官方库已经删除,当中遇到很多问题。这里记录一下编译过程。</p>
<h2 id="Java版本问题"><a href="#Java版本问题" class="headerlink" title="Java版本问题"></a>Java版本问题</h2><h3 id="gradlew-build-出现以下错误"><a href="#gradlew-build-出现以下错误" class="headerlink" title="gradlew build  出现以下错误"></a>gradlew build  出现以下错误</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Could not initialize class org.codehaus.groovy.classgen.Verifier</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: Could not initialize class org.codehaus.groovy.vmplugin.v7.Java7</span><br></pre></td></tr></table></figure>

<p>这通常与 Gradle 使用的 JDK 版本和Gradle不兼容有关。Gradle 5.0 以上版本需要 JDK 8 或更高版本。可以通过修改 gradle-wrapper.properties 文件中的 distributionUrl 来指定 JDK 版本。</p>
<p>java -version</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">查找java8huo java11的路径</span><br></pre></td></tr></table></figure>
<p>修改gradle.properties文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">org.gradle.java.home=/path/to/java8_or_java11</span><br></pre></td></tr></table></figure>
<h3 id="在android-studio中出现-Unsupported-Java"><a href="#在android-studio中出现-Unsupported-Java" class="headerlink" title="在android studio中出现 Unsupported Java."></a>在android studio中出现 Unsupported Java.</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Unsupported Java. </span><br><span class="line">Your build is currently configured to use Java 17.0.6 and Gradle 5.6.4.</span><br></pre></td></tr></table></figure>
<p>解决方法，需要在andori studio中修改jdk版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">可以手动打开 JDK 设置：</span><br><span class="line">转到 File &gt; Settings（在 macOS 上为 Android Studio &gt; Preferences）。</span><br><span class="line">在左侧导航栏中找到 Build, Execution, Deployment &gt; Build Tools &gt; Gradle。</span><br><span class="line">在 Gradle 设置页面上，你可以选择项目使用的 JDK 版本。</span><br><span class="line">检查和修改 JDK 路径：</span><br><span class="line">在 Gradle JDK 下拉菜单中选择兼容的 JDK 版本（推荐使用 Java 8 或 Java 11，如果你使用 Gradle 5.6.4）。</span><br><span class="line">设置完成后，点击 Apply，然后点击 OK。</span><br></pre></td></tr></table></figure>
<p><img src="/images/gradelsdk.png" alt="image"></p>
<h2 id="修改gradle版本"><a href="#修改gradle版本" class="headerlink" title="修改gradle版本"></a>修改gradle版本</h2><p>对于老项目，gradle版本可能比较老，需要修改gradle版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在gradle-wrapper.properties文件中修改gradle版本</span><br><span class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-5.6.4-all.zip //修改为5.6.4</span><br></pre></td></tr></table></figure>

<h2 id="旧版本依赖问题"><a href="#旧版本依赖问题" class="headerlink" title="旧版本依赖问题"></a>旧版本依赖问题</h2><p>这次编译遇到的anko库,在官方库中已经删除,处理了很久，这里记录一下解决方法。</p>
<h3 id="手动下载jar包或者aar包-本地引用"><a href="#手动下载jar包或者aar包-本地引用" class="headerlink" title="手动下载jar包或者aar包,本地引用"></a>手动下载jar包或者aar包,本地引用</h3><h4 id="flatDir-方式"><a href="#flatDir-方式" class="headerlink" title="flatDir 方式"></a>flatDir 方式</h4><p>1,将编译好的 .jar 或 .aar 文件放到你项目的 libs 文件夹中<br>2,在你的 build.gradle 文件中添加如下代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        flatDir &#123;</span><br><span class="line">            dirs &#x27;libs&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3, 在app的build.gradle中添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation(name: &#x27;anko-sdk15-0.10.8&#x27;, ext: &#x27;aar&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">或者</span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation files(&#x27;libs/anko-sdk15-0.10.8.aar&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用-mavenLocal-和-mvn-install-方法"><a href="#使用-mavenLocal-和-mvn-install-方法" class="headerlink" title="使用 mavenLocal 和 mvn install 方法"></a>使用 mavenLocal 和 mvn install 方法</h4><p>1, 安装 AAR 到本地 Maven 仓库：<br>在 mvn install:install-file 命令中，参数-Dfile 是指 AAR 文件的路径，可以是相对路径或者绝对路径。-DgroupId 和 -DartifactId 是 Maven 中用来唯一标识项目的坐标，你可以根据项目的情况来设置这些值。</p>
<p>参数解释：<br>-Dfile：指向你要安装的 AAR 文件的路径，可以是绝对路径或相对路径。<br>绝对路径：如 &#x2F;Users&#x2F;username&#x2F;project&#x2F;libs&#x2F;your-library.aar<br>相对路径：如 libs&#x2F;your-library.aar<br>-DgroupId：是库的分组ID，用于组织库，可以根据你的项目来命名。例如，如果你正在处理一个自定义库，可以使用类似 com.example.mylibrary 这样的命名。通常，这与组织或公司名相关。</p>
<p>-DartifactId：是库的工件ID，一般是库的名称。例如，如果你正在处理一个名为 anko-commons 的库，那么 artifactId 可以是 anko-commons。</p>
<p>-Dversion：库的版本号，可以设置为你需要的任何版本。例如，0.10.8。</p>
<p>-Dpackaging&#x3D;aar：指明文件类型为 aar。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=anko-sdk15-0.10.8.aar -DgroupId=org.jetbrains.anko -DartifactId=anko-sdk15 -Dversion=0.10.8 -Dpackaging=aar</span><br></pre></td></tr></table></figure>
<p>2,引入本地maven库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3,在app的build.gradle中添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation &#x27;org.jetbrains.anko:anko-sdk15:0.10.8&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="最终解决办法"><a href="#最终解决办法" class="headerlink" title="最终解决办法"></a>最终解决办法</h4><p>终于找到了阿里的maven库，可以直接引用; 阿里这回值得表扬一下，提供了很多老的依赖库，可以直接引用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url &#x27;https://maven.aliyun.com/repository/public&#x27; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation &#x27;org.jetbrains.anko:anko-sdk15:0.10.8&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Kotlin-版本冲突"><a href="#Kotlin-版本冲突" class="headerlink" title="Kotlin 版本冲突"></a>Kotlin 版本冲突</h2><p>在编译过程中，遇到了kotlin版本冲突问题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> Task :app:compileDebugKotlin FAILED</span><br><span class="line">w: Runtime JAR files in the classpath should have the same version. These files were found in the classpath:</span><br><span class="line">w: Consider providing an explicit dependency on kotlin-reflect 1.3 to prevent strange errors</span><br><span class="line">w: Some runtime JAR files in the classpath have an incompatible version. Consider removing them from the classpath</span><br></pre></td></tr></table></figure>
<p>解决方法，在项目的 build.gradle 中统一 Kotlin 版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ext.kotlin_version = &#x27;1.3.72&#x27;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解决jre7问题"><a href="#解决jre7问题" class="headerlink" title="解决jre7问题"></a>解决jre7问题</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">Could not determine the dependencies of task &#x27;:app:lintVitalRelease&#x27;.</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Could not resolve all artifacts <span class="keyword">for</span> configuration <span class="string">&#x27;:app:debugCompileClasspath&#x27;</span>.</span></span><br><span class="line"><span class="meta prompt_">   &gt; </span><span class="language-bash">Could not find org.jetbrains.kotlin:kotlin-stdlib-jre7:1.3.50.</span></span><br><span class="line">     Required by:</span><br><span class="line">         project :app &gt; com.twisty:interlude:1.0.2</span><br></pre></td></tr></table></figure>
<p>出现以上的错误 ，是因为项目中引用了 kotlin-stdlib-jre7，但是在maven中找不到这个库，需要修改为 kotlin-stdlib-jdk7<br>解决方法，在项目的 build.gradle 中添加以下代码,这段代码会将所有对 kotlin-stdlib-jre7 的请求重定向到 kotlin-stdlib-jdk7。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">configurations.all &#123;</span><br><span class="line">    resolutionStrategy.eachDependency &#123; details -&gt;</span><br><span class="line">        if (details.requested.name == &quot;kotlin-stdlib-jre7&quot;) &#123;</span><br><span class="line">            details.useTarget(&quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$&#123;details.requested.version&#125;&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>-android</category>
      </categories>
  </entry>
</search>
